     1                                           ;代码清单14-1
     2                                           ;文件名：c14_core.asm
     3                                           ;文件说明：保护模式微型核心程序 
     4                                           ;创建日期：2011-11-6 18:37
     5                                  
     6                                           ;以下常量定义部分。内核的大部分内容都应当固定 
     7                                           core_code_seg_sel     equ  0x38    ;内核代码段选择子
     8                                           core_data_seg_sel     equ  0x30    ;内核数据段选择子 
     9                                           sys_routine_seg_sel   equ  0x28    ;系统公共例程代码段的选择子 
    10                                           video_ram_seg_sel     equ  0x20    ;视频显示缓冲区的段选择子
    11                                           core_stack_seg_sel    equ  0x18    ;内核堆栈段选择子
    12                                           mem_0_4_gb_seg_sel    equ  0x08    ;整个0-4GB内存的段的选择子
    13                                  
    14                                  ;-------------------------------------------------------------------------------
    15                                           ;以下是系统核心的头部，用于加载核心程序 
    16 00000000 [00000000]                       core_length      dd core_end       ;核心程序总长度#00
    17                                  
    18 00000004 [00000000]                       sys_routine_seg  dd section.sys_routine.start
    19                                                                              ;系统公用例程段位置#04
    20                                  
    21 00000008 [00000000]                       core_data_seg    dd section.core_data.start
    22                                                                              ;核心数据段位置#08
    23                                  
    24 0000000C [00000000]                       core_code_seg    dd section.core_code.start
    25                                                                              ;核心代码段位置#0c
    26                                  
    27                                  
    28 00000010 [58020000]                       core_entry       dd start          ;核心代码段入口点#10
    29 00000014 3800                                              dw core_code_seg_sel
    30                                  
    31                                  ;===============================================================================
    32                                           [bits 32]
    33                                  ;===============================================================================
    34                                  SECTION sys_routine vstart=0                ;系统公共例程代码段 
    35                                  ;-------------------------------------------------------------------------------
    36                                           ;字符串显示例程
    37                                  put_string:                                 ;显示0终止的字符串并移动光标 
    38                                                                              ;输入：DS:EBX=串地址
    39 00000000 51                               push ecx
    40                                    .getc:
    41 00000001 8A0B                             mov cl,[ebx]
    42 00000003 08C9                             or cl,cl
    43 00000005 7408                             jz .exit
    44 00000007 E805000000                       call put_char
    45 0000000C 43                               inc ebx
    46 0000000D EBF2                             jmp .getc
    47                                  
    48                                    .exit:
    49 0000000F 59                               pop ecx
    50 00000010 CB                               retf                               ;段间返回
    51                                  
    52                                  ;-------------------------------------------------------------------------------
    53                                  put_char:                                   ;在当前光标处显示一个字符,并推进
    54                                                                              ;光标。仅用于段内调用 
    55                                                                              ;输入：CL=字符ASCII码 
    56 00000011 60                               pushad
    57                                  
    58                                           ;以下取当前光标位置
    59 00000012 66BAD403                         mov dx,0x3d4
    60 00000016 B00E                             mov al,0x0e
    61 00000018 EE                               out dx,al
    62 00000019 6642                             inc dx                             ;0x3d5
    63 0000001B EC                               in al,dx                           ;高字
    64 0000001C 88C4                             mov ah,al
    65                                  
    66 0000001E 664A                             dec dx                             ;0x3d4
    67 00000020 B00F                             mov al,0x0f
    68 00000022 EE                               out dx,al
    69 00000023 6642                             inc dx                             ;0x3d5
    70 00000025 EC                               in al,dx                           ;低字
    71 00000026 6689C3                           mov bx,ax                          ;BX=代表光标位置的16位数
    72                                  
    73 00000029 80F90D                           cmp cl,0x0d                        ;回车符？
    74 0000002C 750E                             jnz .put_0a
    75 0000002E 6689D8                           mov ax,bx
    76 00000031 B350                             mov bl,80
    77 00000033 F6F3                             div bl
    78 00000035 F6E3                             mul bl
    79 00000037 6689C3                           mov bx,ax
    80 0000003A EB60                             jmp .set_cursor
    81                                  
    82                                    .put_0a:
    83 0000003C 80F90A                           cmp cl,0x0a                        ;换行符？
    84 0000003F 7506                             jnz .put_other
    85 00000041 6683C350                         add bx,80
    86 00000045 EB15                             jmp .roll_screen
    87                                  
    88                                    .put_other:                               ;正常显示字符
    89 00000047 06                               push es
    90 00000048 B820000000                       mov eax,video_ram_seg_sel          ;0xb8000段的选择子
    91 0000004D 8EC0                             mov es,eax
    92 0000004F 66D1E3                           shl bx,1
    93 00000052 2667880F                         mov [es:bx],cl
    94 00000056 07                               pop es
    95                                  
    96                                           ;以下将光标位置推进一个字符
    97 00000057 66D1EB                           shr bx,1
    98 0000005A 6643                             inc bx
    99                                  
   100                                    .roll_screen:
   101 0000005C 6681FBD007                       cmp bx,2000                        ;光标超出屏幕？滚屏
   102 00000061 7C39                             jl .set_cursor
   103                                  
   104 00000063 1E                               push ds
   105 00000064 06                               push es
   106 00000065 B820000000                       mov eax,video_ram_seg_sel
   107 0000006A 8ED8                             mov ds,eax
   108 0000006C 8EC0                             mov es,eax
   109 0000006E FC                               cld
   110 0000006F BEA0000000                       mov esi,0xa0                       ;小心！32位模式下movsb/w/d 
   111 00000074 BF00000000                       mov edi,0x00                       ;使用的是esi/edi/ecx 
   112 00000079 B980070000                       mov ecx,1920
   113 0000007E F3A5                             rep movsd
   114 00000080 66BB000F                         mov bx,3840                        ;清除屏幕最底一行
   115 00000084 B950000000                       mov ecx,80                         ;32位程序应该使用ECX
   116                                    .cls:
   117 00000089 266667C7072007                   mov word[es:bx],0x0720
   118 00000090 6683C302                         add bx,2
   119 00000094 E2F3                             loop .cls
   120                                  
   121 00000096 07                               pop es
   122 00000097 1F                               pop ds
   123                                  
   124 00000098 66BB8007                         mov bx,1920
   125                                  
   126                                    .set_cursor:
   127 0000009C 66BAD403                         mov dx,0x3d4
   128 000000A0 B00E                             mov al,0x0e
   129 000000A2 EE                               out dx,al
   130 000000A3 6642                             inc dx                             ;0x3d5
   131 000000A5 88F8                             mov al,bh
   132 000000A7 EE                               out dx,al
   133 000000A8 664A                             dec dx                             ;0x3d4
   134 000000AA B00F                             mov al,0x0f
   135 000000AC EE                               out dx,al
   136 000000AD 6642                             inc dx                             ;0x3d5
   137 000000AF 88D8                             mov al,bl
   138 000000B1 EE                               out dx,al
   139                                  
   140 000000B2 61                               popad
   141                                           
   142 000000B3 C3                               ret                                
   143                                  
   144                                  ;-------------------------------------------------------------------------------
   145                                  read_hard_disk_0:                           ;从硬盘读取一个逻辑扇区
   146                                                                              ;EAX=逻辑扇区号
   147                                                                              ;DS:EBX=目标缓冲区地址
   148                                                                              ;返回：EBX=EBX+512
   149 000000B4 50                               push eax 
   150 000000B5 51                               push ecx
   151 000000B6 52                               push edx
   152                                        
   153 000000B7 50                               push eax
   154                                           
   155 000000B8 66BAF201                         mov dx,0x1f2
   156 000000BC B001                             mov al,1
   157 000000BE EE                               out dx,al                          ;读取的扇区数
   158                                  
   159 000000BF 6642                             inc dx                             ;0x1f3
   160 000000C1 58                               pop eax
   161 000000C2 EE                               out dx,al                          ;LBA地址7~0
   162                                  
   163 000000C3 6642                             inc dx                             ;0x1f4
   164 000000C5 B108                             mov cl,8
   165 000000C7 D3E8                             shr eax,cl
   166 000000C9 EE                               out dx,al                          ;LBA地址15~8
   167                                  
   168 000000CA 6642                             inc dx                             ;0x1f5
   169 000000CC D3E8                             shr eax,cl
   170 000000CE EE                               out dx,al                          ;LBA地址23~16
   171                                  
   172 000000CF 6642                             inc dx                             ;0x1f6
   173 000000D1 D3E8                             shr eax,cl
   174 000000D3 0CE0                             or al,0xe0                         ;第一硬盘  LBA地址27~24
   175 000000D5 EE                               out dx,al
   176                                  
   177 000000D6 6642                             inc dx                             ;0x1f7
   178 000000D8 B020                             mov al,0x20                        ;读命令
   179 000000DA EE                               out dx,al
   180                                  
   181                                    .waits:
   182 000000DB EC                               in al,dx
   183 000000DC 2488                             and al,0x88
   184 000000DE 3C08                             cmp al,0x08
   185 000000E0 75F9                             jnz .waits                         ;不忙，且硬盘已准备好数据传输 
   186                                  
   187 000000E2 B900010000                       mov ecx,256                        ;总共要读取的字数
   188 000000E7 66BAF001                         mov dx,0x1f0
   189                                    .readw:
   190 000000EB 66ED                             in ax,dx
   191 000000ED 668903                           mov [ebx],ax
   192 000000F0 83C302                           add ebx,2
   193 000000F3 E2F6                             loop .readw
   194                                  
   195 000000F5 5A                               pop edx
   196 000000F6 59                               pop ecx
   197 000000F7 58                               pop eax
   198                                        
   199 000000F8 CB                               retf                               ;段间返回 
   200                                  
   201                                  ;-------------------------------------------------------------------------------
   202                                  ;汇编语言程序是极难一次成功，而且调试非常困难。这个例程可以提供帮助 
   203                                  put_hex_dword:                              ;在当前光标处以十六进制形式显示
   204                                                                              ;一个双字并推进光标 
   205                                                                              ;输入：EDX=要转换并显示的数字
   206                                                                              ;输出：无
   207 000000F9 60                               pushad
   208 000000FA 1E                               push ds
   209                                        
   210 000000FB 66B83000                         mov ax,core_data_seg_sel           ;切换到核心数据段 
   211 000000FF 8ED8                             mov ds,ax
   212                                        
   213 00000101 BB[08050000]                     mov ebx,bin_hex                    ;指向核心数据段内的转换表
   214 00000106 B908000000                       mov ecx,8
   215                                    .xlt:    
   216 0000010B C1C204                           rol edx,4
   217 0000010E 89D0                             mov eax,edx
   218 00000110 83E00F                           and eax,0x0000000f
   219 00000113 D7                               xlat
   220                                        
   221 00000114 51                               push ecx
   222 00000115 88C1                             mov cl,al                           
   223 00000117 E8F5FEFFFF                       call put_char
   224 0000011C 59                               pop ecx
   225                                         
   226 0000011D E2EC                             loop .xlt
   227                                        
   228 0000011F 1F                               pop ds
   229 00000120 61                               popad
   230 00000121 CB                               retf
   231                                        
   232                                  ;-------------------------------------------------------------------------------
   233                                  allocate_memory:                            ;分配内存
   234                                                                              ;输入：ECX=希望分配的字节数
   235                                                                              ;输出：ECX=起始线性地址 
   236 00000122 1E                               push ds
   237 00000123 50                               push eax
   238 00000124 53                               push ebx
   239                                        
   240 00000125 B830000000                       mov eax,core_data_seg_sel
   241 0000012A 8ED8                             mov ds,eax
   242                                        
   243 0000012C A1[06000000]                     mov eax,[ram_alloc]
   244 00000131 01C8                             add eax,ecx                        ;下一次分配时的起始地址
   245                                        
   246                                           ;这里应当有检测可用内存数量的指令
   247                                            
   248 00000133 8B0D[06000000]                   mov ecx,[ram_alloc]                ;返回分配的起始地址
   249                                  
   250 00000139 89C3                             mov ebx,eax
   251 0000013B 83E3FC                           and ebx,0xfffffffc
   252 0000013E 83C304                           add ebx,4                          ;强制对齐 
   253 00000141 A903000000                       test eax,0x00000003                ;下次分配的起始地址最好是4字节对齐
   254 00000146 0F45C3                           cmovnz eax,ebx                     ;如果没有对齐，则强制对齐 
   255 00000149 A3[06000000]                     mov [ram_alloc],eax                ;下次从该地址分配内存
   256                                                                              ;cmovcc指令可以避免控制转移 
   257 0000014E 5B                               pop ebx
   258 0000014F 58                               pop eax
   259 00000150 1F                               pop ds
   260                                  
   261 00000151 CB                               retf
   262                                  
   263                                  ;-------------------------------------------------------------------------------
   264                                  set_up_gdt_descriptor:                      ;在GDT内安装一个新的描述符
   265                                                                              ;输入：EDX:EAX=描述符 
   266                                                                              ;输出：CX=描述符的选择子
   267 00000152 50                               push eax
   268 00000153 53                               push ebx
   269 00000154 52                               push edx
   270                                  
   271 00000155 1E                               push ds
   272 00000156 06                               push es
   273                                  
   274 00000157 BB30000000                       mov ebx,core_data_seg_sel          ;切换到核心数据段
   275 0000015C 8EDB                             mov ds,ebx
   276                                  
   277 0000015E 0F0105[00000000]                 sgdt [pgdt]                        ;以便开始处理GDT
   278                                  
   279 00000165 BB08000000                       mov ebx,mem_0_4_gb_seg_sel
   280 0000016A 8EC3                             mov es,ebx
   281                                  
   282 0000016C 0FB71D[00000000]                 movzx ebx,word [pgdt]              ;GDT界限
   283 00000173 6643                             inc bx                             ;GDT总字节数，也是下一个描述符偏移
   284 00000175 031D[02000000]                   add ebx,[pgdt+2]                   ;下一个描述符的线性地址
   285                                  
   286 0000017B 268903                           mov [es:ebx],eax
   287 0000017E 26895304                         mov [es:ebx+4],edx
   288                                  
   289 00000182 668305[00000000]08               add word [pgdt],8                  ;增加一个描述符的大小
   290                                  
   291 0000018A 0F0115[00000000]                 lgdt [pgdt]                        ;对GDT的更改生效
   292                                  
   293 00000191 66A1[00000000]                   mov ax,[pgdt]                      ;得到GDT界限值
   294 00000197 6631D2                           xor dx,dx
   295 0000019A 66BB0800                         mov bx,8
   296 0000019E 66F7F3                           div bx                             ;除以8，去掉余数
   297 000001A1 6689C1                           mov cx,ax
   298 000001A4 66C1E103                         shl cx,3                           ;将索引号移到正确位置
   299                                  
   300 000001A8 07                               pop es
   301 000001A9 1F                               pop ds
   302                                  
   303 000001AA 5A                               pop edx
   304 000001AB 5B                               pop ebx
   305 000001AC 58                               pop eax
   306                                  
   307 000001AD CB                               retf
   308                                  ;-------------------------------------------------------------------------------
   309                                  make_seg_descriptor:                        ;构造存储器和系统的段描述符
   310                                                                              ;输入：EAX=线性基地址
   311                                                                              ;      EBX=段界限
   312                                                                              ;      ECX=属性。各属性位都在原始
   313                                                                              ;          位置，无关的位清零 
   314                                                                              ;返回：EDX:EAX=描述符
   315 000001AE 89C2                             mov edx,eax
   316 000001B0 C1E010                           shl eax,16
   317 000001B3 6609D8                           or ax,bx                           ;描述符前32位(EAX)构造完毕
   318                                  
   319 000001B6 81E20000FFFF                     and edx,0xffff0000                 ;清除基地址中无关的位
   320 000001BC C1C208                           rol edx,8
   321 000001BF 0FCA                             bswap edx                          ;装配基址的31~24和23~16  (80486+)
   322                                  
   323 000001C1 6631DB                           xor bx,bx
   324 000001C4 09DA                             or edx,ebx                         ;装配段界限的高4位
   325                                  
   326 000001C6 09CA                             or edx,ecx                         ;装配属性
   327                                  
   328 000001C8 CB                               retf
   329                                  
   330                                  sys_routine_end:
   331                                  
   332                                  ;===============================================================================
   333                                  SECTION core_data vstart=0                  ;系统核心的数据段 
   334                                  ;------------------------------------------------------------------------------- 
   335 00000000 0000                             pgdt             dw  0             ;用于设置和修改GDT 
   336 00000002 00000000                                          dd  0
   337                                  
   338 00000006 00001000                         ram_alloc        dd  0x00100000    ;下次分配内存时的起始地址
   339                                  
   340                                           ;符号地址检索表
   341                                           salt:
   342 0000000A 405072696E74537472-              salt_1           db  '@PrintString'
   342 00000013 696E67             
   343 00000016 00<rept>                                     times 256-($-salt_1) db 0
   344 0000010A [00000000]                                        dd  put_string
   345 0000010E 2800                                              dw  sys_routine_seg_sel
   346                                  
   347 00000110 40526561644469736B-              salt_2           db  '@ReadDiskData'
   347 00000119 44617461           
   348 0000011D 00<rept>                                     times 256-($-salt_2) db 0
   349 00000210 [B4000000]                                        dd  read_hard_disk_0
   350 00000214 2800                                              dw  sys_routine_seg_sel
   351                                  
   352 00000216 405072696E7444776F-              salt_3           db  '@PrintDwordAsHexString'
   352 0000021F 726441734865785374-
   352 00000228 72696E67           
   353 0000022C 00<rept>                                     times 256-($-salt_3) db 0
   354 00000316 [F9000000]                                        dd  put_hex_dword
   355 0000031A 2800                                              dw  sys_routine_seg_sel
   356                                  
   357 0000031C 405465726D696E6174-              salt_4           db  '@TerminateProgram'
   357 00000325 6550726F6772616D   
   358 0000032D 00<rept>                                     times 256-($-salt_4) db 0
   359 0000041C [32030000]                                        dd  return_point
   360 00000420 3800                                              dw  core_code_seg_sel
   361                                  
   362                                           salt_item_len   equ $-salt_4
   363                                           salt_items      equ ($-salt)/salt_item_len
   364                                  
   365 00000422 2020496620796F7520-              message_1        db  '  If you seen this message,that means we '
   365 0000042B 7365656E2074686973-
   365 00000434 206D6573736167652C-
   365 0000043D 74686174206D65616E-
   365 00000446 7320776520         
   366 0000044B 617265206E6F772069-                               db  'are now in protect mode,and the system '
   366 00000454 6E2070726F74656374-
   366 0000045D 206D6F64652C616E64-
   366 00000466 207468652073797374-
   366 0000046F 656D20             
   367 00000472 636F7265206973206C-                               db  'core is loaded,and the video display '
   367 0000047B 6F616465642C616E64-
   367 00000484 207468652076696465-
   367 0000048D 6F20646973706C6179-
   367 00000496 20                 
   368 00000497 726F7574696E652077-                               db  'routine works perfectly.',0x0d,0x0a,0
   368 000004A0 6F726B732070657266-
   368 000004A9 6563746C792E0D0A00 
   369                                  
   370 000004B2 0D0A20204C6F616469-              message_3        db  0x0d,0x0a,'  Loading user program...',0
   370 000004BB 6E6720757365722070-
   370 000004C4 726F6772616D2E2E2E-
   370 000004CD 00                 
   371                                           
   372 000004CE 446F6E652E0D0A00                 do_status        db  'Done.',0x0d,0x0a,0
   373                                           
   374 000004D6 0D0A0D0A0D0A                     message_6        db  0x0d,0x0a,0x0d,0x0a,0x0d,0x0a
   375 000004DC 202055736572207072-                               db  '  User program terminated,control returned.',0
   375 000004E5 6F6772616D20746572-
   375 000004EE 6D696E617465642C63-
   375 000004F7 6F6E74726F6C207265-
   375 00000500 7475726E65642E00   
   376                                  
   377 00000508 303132333435363738-              bin_hex          db '0123456789ABCDEF'
   377 00000511 39414243444546     
   378                                                                              ;put_hex_dword子过程用的查找表 
   379                                  
   380 00000518 00<rept>                         core_buf   times 2048 db 0         ;内核用的缓冲区
   381                                  
   382 00000D18 00000000                         esp_pointer      dd 0              ;内核用来临时保存自己的栈指针     
   383                                  
   384 00000D1C 0D0A202000                       cpu_brnd0        db 0x0d,0x0a,'  ',0
   385 00000D21 00<rept>                         cpu_brand  times 52 db 0
   386 00000D55 0D0A0D0A00                       cpu_brnd1        db 0x0d,0x0a,0x0d,0x0a,0
   387                                  
   388                                           ;任务控制块链
   389 00000D5A 00000000                         tcb_chain        dd  0
   390                                  
   391                                  core_data_end:
   392                                                 
   393                                  ;===============================================================================
   394                                  SECTION core_code vstart=0
   395                                  ;-------------------------------------------------------------------------------
   396                                  fill_descriptor_in_ldt:                     ;在LDT内安装一个新的描述符
   397                                                                              ;输入：EDX:EAX=描述符
   398                                                                              ;          EBX=TCB基地址
   399                                                                              ;输出：CX=描述符的选择子
   400 00000000 50                               push eax
   401 00000001 52                               push edx
   402 00000002 57                               push edi
   403 00000003 1E                               push ds
   404                                  
   405 00000004 B908000000                       mov ecx,mem_0_4_gb_seg_sel
   406 00000009 8ED9                             mov ds,ecx
   407                                  
   408 0000000B 8B7B0C                           mov edi,[ebx+0x0c]                 ;获得LDT基地址
   409                                           
   410 0000000E 31C9                             xor ecx,ecx
   411 00000010 668B4B0A                         mov cx,[ebx+0x0a]                  ;获得LDT界限
   412 00000014 6641                             inc cx                             ;LDT的总字节数，即新描述符偏移地址
   413                                           
   414 00000016 89040F                           mov [edi+ecx+0x00],eax
   415 00000019 89540F04                         mov [edi+ecx+0x04],edx             ;安装描述符
   416                                  
   417 0000001D 6683C108                         add cx,8                           
   418 00000021 6649                             dec cx                             ;得到新的LDT界限值 
   419                                  
   420 00000023 66894B0A                         mov [ebx+0x0a],cx                  ;更新LDT界限值到TCB
   421                                  
   422 00000027 6689C8                           mov ax,cx
   423 0000002A 6631D2                           xor dx,dx
   424 0000002D 66B90800                         mov cx,8
   425 00000031 66F7F1                           div cx
   426                                           
   427 00000034 6689C1                           mov cx,ax
   428 00000037 66C1E103                         shl cx,3                           ;左移3位，并且
   429 0000003B 6683C904                         or cx,0000_0000_0000_0100B         ;使TI位=1，指向LDT，最后使RPL=00 
   430                                  
   431 0000003F 1F                               pop ds
   432 00000040 5F                               pop edi
   433 00000041 5A                               pop edx
   434 00000042 58                               pop eax
   435                                       
   436 00000043 C3                               ret
   437                                        
   438                                  ;------------------------------------------------------------------------------- 
   439                                  load_relocate_program:                      ;加载并重定位用户程序
   440                                                                              ;输入: PUSH 逻辑扇区号
   441                                                                              ;      PUSH 任务控制块基地址
   442                                                                              ;输出：无 
   443 00000044 60                               pushad
   444                                        
   445 00000045 1E                               push ds
   446 00000046 06                               push es
   447                                        
   448 00000047 89E5                             mov ebp,esp                        ;为访问通过堆栈传递的参数做准备
   449                                        
   450 00000049 B908000000                       mov ecx,mem_0_4_gb_seg_sel
   451 0000004E 8EC1                             mov es,ecx
   452                                        
   453 00000050 8B752C                           mov esi,[ebp+11*4]                 ;从堆栈中取得TCB的基地址
   454                                  
   455                                           ;以下申请创建LDT所需要的内存
   456 00000053 B9A0000000                       mov ecx,160                        ;允许安装20个LDT描述符
   457 00000058 9A[22010000]2800                 call sys_routine_seg_sel:allocate_memory
   458 0000005F 26894E0C                         mov [es:esi+0x0c],ecx              ;登记LDT基地址到TCB中
   459 00000063 2666C7460AFFFF                   mov word [es:esi+0x0a],0xffff      ;登记LDT初始的界限到TCB中 
   460                                  
   461                                           ;以下开始加载用户程序 
   462 0000006A B830000000                       mov eax,core_data_seg_sel
   463 0000006F 8ED8                             mov ds,eax                         ;切换DS到内核数据段
   464                                         
   465 00000071 8B4530                           mov eax,[ebp+12*4]                 ;从堆栈中取出用户程序起始扇区号 
   466 00000074 BB[18050000]                     mov ebx,core_buf                   ;读取程序头部数据     
   467 00000079 9A[B4000000]2800                 call sys_routine_seg_sel:read_hard_disk_0
   468                                  
   469                                           ;以下判断整个程序有多大
   470 00000080 A1[18050000]                     mov eax,[core_buf]                 ;程序尺寸
   471 00000085 89C3                             mov ebx,eax
   472 00000087 81E300FEFFFF                     and ebx,0xfffffe00                 ;使之512字节对齐（能被512整除的数低 
   473 0000008D 81C300020000                     add ebx,512                        ;9位都为0 
   474 00000093 A9FF010000                       test eax,0x000001ff                ;程序的大小正好是512的倍数吗? 
   475 00000098 0F45C3                           cmovnz eax,ebx                     ;不是。使用凑整的结果
   476                                        
   477 0000009B 89C1                             mov ecx,eax                        ;实际需要申请的内存数量
   478 0000009D 9A[22010000]2800                 call sys_routine_seg_sel:allocate_memory
   479 000000A4 26894E06                         mov [es:esi+0x06],ecx              ;登记程序加载基地址到TCB中
   480                                        
   481 000000A8 89CB                             mov ebx,ecx                        ;ebx -> 申请到的内存首地址
   482 000000AA 31D2                             xor edx,edx
   483 000000AC B900020000                       mov ecx,512
   484 000000B1 F7F1                             div ecx
   485 000000B3 89C1                             mov ecx,eax                        ;总扇区数 
   486                                        
   487 000000B5 B808000000                       mov eax,mem_0_4_gb_seg_sel         ;切换DS到0-4GB的段
   488 000000BA 8ED8                             mov ds,eax
   489                                  
   490 000000BC 8B4530                           mov eax,[ebp+12*4]                 ;起始扇区号 
   491                                    .b1:
   492 000000BF 9A[B4000000]2800                 call sys_routine_seg_sel:read_hard_disk_0
   493 000000C6 40                               inc eax
   494 000000C7 E2F6                             loop .b1                           ;循环读，直到读完整个用户程序
   495                                  
   496 000000C9 268B7E06                         mov edi,[es:esi+0x06]              ;获得程序加载基地址
   497                                  
   498                                           ;建立程序头部段描述符
   499 000000CD 89F8                             mov eax,edi                        ;程序头部起始线性地址
   500 000000CF 8B5F04                           mov ebx,[edi+0x04]                 ;段长度
   501 000000D2 4B                               dec ebx                            ;段界限
   502 000000D3 B900924000                       mov ecx,0x00409200                 ;字节粒度的数据段描述符，特权级0
   503 000000D8 9A[AE010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   504                                        
   505                                           ;安装头部段描述符到LDT中 
   506 000000DF 89F3                             mov ebx,esi                        ;TCB的基地址
   507 000000E1 E81AFFFFFF                       call fill_descriptor_in_ldt
   508                                  
   509 000000E6 2666894E44                       mov [es:esi+0x44],cx               ;登记程序头部段选择子到TCB 
   510 000000EB 66894F04                         mov [edi+0x04],cx                  ;和头部内 
   511                                        
   512                                           ;建立程序代码段描述符
   513 000000EF 89F8                             mov eax,edi
   514 000000F1 03470C                           add eax,[edi+0x0c]                 ;代码起始线性地址
   515 000000F4 8B5F10                           mov ebx,[edi+0x10]                 ;段长度
   516 000000F7 4B                               dec ebx                            ;段界限
   517 000000F8 B900984000                       mov ecx,0x00409800                 ;字节粒度的代码段描述符，特权级0
   518 000000FD 9A[AE010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   519 00000104 89F3                             mov ebx,esi                        ;TCB的基地址
   520 00000106 E8F5FEFFFF                       call fill_descriptor_in_ldt
   521 0000010B 66894F0C                         mov [edi+0x0c],cx                  ;登记代码段选择子到头部
   522                                  
   523                                           ;建立程序数据段描述符
   524 0000010F 89F8                             mov eax,edi
   525 00000111 034714                           add eax,[edi+0x14]                 ;数据段起始线性地址
   526 00000114 8B5F18                           mov ebx,[edi+0x18]                 ;段长度
   527 00000117 4B                               dec ebx                            ;段界限 
   528 00000118 B900924000                       mov ecx,0x00409200                 ;字节粒度的数据段描述符，特权级0
   529 0000011D 9A[AE010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   530 00000124 89F3                             mov ebx,esi                        ;TCB的基地址
   531 00000126 E8D5FEFFFF                       call fill_descriptor_in_ldt
   532 0000012B 66894F14                         mov [edi+0x14],cx                  ;登记数据段选择子到头部
   533                                  
   534                                           ;建立程序堆栈段描述符
   535 0000012F 89F8                             mov eax,edi
   536 00000131 03471C                           add eax,[edi+0x1c]                 ;数据段起始线性地址
   537 00000134 8B5F20                           mov ebx,[edi+0x20]                 ;段长度
   538 00000137 4B                               dec ebx                            ;段界限
   539 00000138 B900924000                       mov ecx,0x00409200                 ;字节粒度的堆栈段描述符，特权级3
   540 0000013D 9A[AE010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   541 00000144 89F3                             mov ebx,esi                        ;TCB的基地址
   542 00000146 E8B5FEFFFF                       call fill_descriptor_in_ldt
   543 0000014B 66894F1C                         mov [edi+0x1c],cx                  ;登记堆栈段选择子到头部
   544                                  
   545                                           ;重定位SALT 
   546 0000014F B808000000                       mov eax,mem_0_4_gb_seg_sel         ;这里和前一章不同，头部段描述符
   547 00000154 8EC0                             mov es,eax                         ;已安装，但还没有生效，故只能通
   548                                                                              ;过4GB段访问用户程序头部          
   549 00000156 B830000000                       mov eax,core_data_seg_sel
   550 0000015B 8ED8                             mov ds,eax
   551                                        
   552 0000015D FC                               cld
   553                                  
   554 0000015E 268B4F24                         mov ecx,[es:edi+0x24]              ;U-SALT条目数(通过访问4GB段取得) 
   555 00000162 83C728                           add edi,0x28                       ;U-SALT在4GB段内的偏移 
   556                                    .b2: 
   557 00000165 51                               push ecx
   558 00000166 57                               push edi
   559                                        
   560 00000167 B904000000                       mov ecx,salt_items
   561 0000016C BE[0A000000]                     mov esi,salt
   562                                    .b3:
   563 00000171 57                               push edi
   564 00000172 56                               push esi
   565 00000173 51                               push ecx
   566                                  
   567 00000174 B940000000                       mov ecx,64                         ;检索表中，每条目的比较次数 
   568 00000179 F3A7                             repe cmpsd                         ;每次比较4字节 
   569 0000017B 7515                             jnz .b4
   570 0000017D 8B06                             mov eax,[esi]                      ;若匹配，则esi恰好指向其后的地址
   571 0000017F 26898700FFFFFF                   mov [es:edi-256],eax               ;将字符串改写成偏移地址 
   572 00000186 668B4604                         mov ax,[esi+4]
   573 0000018A 2666898704FFFFFF                 mov [es:edi-252],ax                ;回填段选择子
   574                                    .b4:
   575                                        
   576 00000192 59                               pop ecx
   577 00000193 5E                               pop esi
   578 00000194 81C606010000                     add esi,salt_item_len
   579 0000019A 5F                               pop edi                            ;从头比较 
   580 0000019B E2D4                             loop .b3
   581                                        
   582 0000019D 5F                               pop edi
   583 0000019E 81C700010000                     add edi,256
   584 000001A4 59                               pop ecx
   585 000001A5 E2BE                             loop .b2
   586                                  
   587 000001A7 8B752C                           mov esi,[ebp+11*4]                 ;从堆栈中取得TCB的基地址
   588                                  
   589                                           ;在GDT中登记LDT描述符
   590 000001AA 268B460C                         mov eax,[es:esi+0x0c]              ;LDT的起始线性地址
   591 000001AE 260FB75E0A                       movzx ebx,word [es:esi+0x0a]       ;LDT段界限
   592 000001B3 B900820000                       mov ecx,0x00008200                 ;LDT描述符，特权级0
   593 000001B8 9A[AE010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   594 000001BF 9A[52010000]2800                 call sys_routine_seg_sel:set_up_gdt_descriptor
   595 000001C6 2666894E10                       mov [es:esi+0x10],cx               ;登记LDT选择子到TCB中
   596                                         
   597                                           ;创建用户程序的TSS
   598 000001CB B968000000                       mov ecx,104                        ;tss的基本尺寸
   599 000001D0 2666894E12                       mov [es:esi+0x12],cx              
   600 000001D5 2666FF4E12                       dec word [es:esi+0x12]             ;登记TSS界限值到TCB 
   601 000001DA 9A[22010000]2800                 call sys_routine_seg_sel:allocate_memory
   602 000001E1 26894E14                         mov [es:esi+0x14],ecx              ;登记TSS基地址到TCB
   603                                        
   604 000001E5 26668B5610                       mov dx,[es:esi+0x10]               ;登记任务的LDT选择子
   605 000001EA 2666895160                       mov [es:ecx+96],dx                 ;到TSS中
   606                                        
   607 000001EF 2666C741640000                   mov word [es:ecx+100],0            ;T=0
   608                                         
   609                                           ;在GDT中登记TSS描述符
   610 000001F6 268B4614                         mov eax,[es:esi+0x14]              ;TSS的起始线性地址
   611 000001FA 260FB75E12                       movzx ebx,word [es:esi+0x12]       ;段长度（界限）
   612 000001FF B900890000                       mov ecx,0x00008900                 ;TSS描述符，特权级0
   613 00000204 9A[AE010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   614 0000020B 9A[52010000]2800                 call sys_routine_seg_sel:set_up_gdt_descriptor
   615 00000212 2666894E18                       mov [es:esi+0x18],cx               ;登记TSS选择子到TCB
   616                                  
   617 00000217 07                               pop es                             ;恢复到调用此过程前的es段 
   618 00000218 1F                               pop ds                             ;恢复到调用此过程前的ds段
   619                                        
   620 00000219 61                               popad
   621                                        
   622 0000021A C20800                           ret 8                              ;丢弃调用本过程前压入的参数 
   623                                        
   624                                  ;-------------------------------------------------------------------------------
   625                                  append_to_tcb_link:                         ;在TCB链上追加任务控制块
   626                                                                              ;输入：ECX=TCB线性基地址
   627 0000021D 50                               push eax
   628 0000021E 52                               push edx
   629 0000021F 1E                               push ds
   630 00000220 06                               push es
   631                                           
   632 00000221 B830000000                       mov eax,core_data_seg_sel          ;令DS指向内核数据段 
   633 00000226 8ED8                             mov ds,eax
   634 00000228 B808000000                       mov eax,mem_0_4_gb_seg_sel         ;令ES指向0..4GB段
   635 0000022D 8EC0                             mov es,eax
   636                                           
   637 0000022F 26C70100000000                   mov dword [es: ecx+0x00],0         ;当前TCB指针域清零，以指示这是最
   638                                                                              ;后一个TCB
   639                                                                               
   640 00000236 A1[5A0D0000]                     mov eax,[tcb_chain]                ;TCB表头指针
   641 0000023B 09C0                             or eax,eax                         ;链表为空？
   642 0000023D 740E                             jz .notcb 
   643                                           
   644                                    .searc:
   645 0000023F 89C2                             mov edx,eax
   646 00000241 268B02                           mov eax,[es: edx+0x00]
   647 00000244 09C0                             or eax,eax               
   648 00000246 75F7                             jnz .searc
   649                                           
   650 00000248 26890A                           mov [es: edx+0x00],ecx
   651 0000024B EB06                             jmp .retpc
   652                                           
   653                                    .notcb:       
   654 0000024D 890D[5A0D0000]                   mov [tcb_chain],ecx                ;若为空表，直接令表头指针指向TCB
   655                                           
   656                                    .retpc:
   657 00000253 07                               pop es
   658 00000254 1F                               pop ds
   659 00000255 5A                               pop edx
   660 00000256 58                               pop eax
   661                                           
   662 00000257 C3                               ret
   663                                           
   664                                  ;-------------------------------------------------------------------------------
   665                                  start:
   666 00000258 B930000000                       mov ecx,core_data_seg_sel          ;使ds指向核心数据段 
   667 0000025D 8ED9                             mov ds,ecx
   668                                  
   669 0000025F BB[22040000]                     mov ebx,message_1                    
   670 00000264 9A[00000000]2800                 call sys_routine_seg_sel:put_string
   671                                                                           
   672                                           ;显示处理器品牌信息 
   673 0000026B B802000080                       mov eax,0x80000002
   674 00000270 0FA2                             cpuid
   675 00000272 A3[210D0000]                     mov [cpu_brand + 0x00],eax
   676 00000277 891D[250D0000]                   mov [cpu_brand + 0x04],ebx
   677 0000027D 890D[290D0000]                   mov [cpu_brand + 0x08],ecx
   678 00000283 8915[2D0D0000]                   mov [cpu_brand + 0x0c],edx
   679                                        
   680 00000289 B803000080                       mov eax,0x80000003
   681 0000028E 0FA2                             cpuid
   682 00000290 A3[310D0000]                     mov [cpu_brand + 0x10],eax
   683 00000295 891D[350D0000]                   mov [cpu_brand + 0x14],ebx
   684 0000029B 890D[390D0000]                   mov [cpu_brand + 0x18],ecx
   685 000002A1 8915[3D0D0000]                   mov [cpu_brand + 0x1c],edx
   686                                  
   687 000002A7 B804000080                       mov eax,0x80000004
   688 000002AC 0FA2                             cpuid
   689 000002AE A3[410D0000]                     mov [cpu_brand + 0x20],eax
   690 000002B3 891D[450D0000]                   mov [cpu_brand + 0x24],ebx
   691 000002B9 890D[490D0000]                   mov [cpu_brand + 0x28],ecx
   692 000002BF 8915[4D0D0000]                   mov [cpu_brand + 0x2c],edx
   693                                  
   694 000002C5 BB[1C0D0000]                     mov ebx,cpu_brnd0                  ;显示处理器品牌信息 
   695 000002CA 9A[00000000]2800                 call sys_routine_seg_sel:put_string
   696 000002D1 BB[210D0000]                     mov ebx,cpu_brand
   697 000002D6 9A[00000000]2800                 call sys_routine_seg_sel:put_string
   698 000002DD BB[550D0000]                     mov ebx,cpu_brnd1
   699 000002E2 9A[00000000]2800                 call sys_routine_seg_sel:put_string
   700                                  
   701 000002E9 BB[B2040000]                     mov ebx,message_3
   702 000002EE 9A[00000000]2800                 call sys_routine_seg_sel:put_string
   703                                  
   704                                           ;创建任务控制块。这不是处理器的要求，而是我们自己为了方便而设立的
   705 000002F5 B946000000                       mov ecx,0x46
   706 000002FA 9A[22010000]2800                 call sys_routine_seg_sel:allocate_memory
   707 00000301 E817FFFFFF                       call append_to_tcb_link            ;将任务控制块追加到TCB链表 
   708                                        
   709 00000306 6A32                             push dword 50                      ;用户程序位于逻辑50扇区
   710 00000308 51                               push ecx                           ;压入任务控制块起始线性地址 
   711                                         
   712 00000309 E836FDFFFF                       call load_relocate_program
   713                                        
   714 0000030E BB[CE040000]                     mov ebx,do_status
   715 00000313 9A[00000000]2800                 call sys_routine_seg_sel:put_string
   716                                        
   717 0000031A B808000000                       mov eax,mem_0_4_gb_seg_sel
   718 0000031F 8ED8                             mov ds,eax
   719                                        
   720 00000321 0F005918                         ltr [ecx+0x18]                     ;加载任务状态段
   721 00000325 0F005110                         lldt [ecx+0x10]                    ;加载LDT
   722                                        
   723 00000329 8E5944                           mov ds,[ecx+0x44]                  ;切换到用户程序头部段
   724                                  
   725 0000032C FF2D08000000                     jmp far [0x08]
   726                                  
   727                                  return_point:                               ;用户程序返回点
   728 00000332 B830000000                       mov eax,core_data_seg_sel
   729 00000337 8ED8                             mov ds,eax
   730                                  
   731 00000339 B818000000                       mov eax,core_stack_seg_sel         ;切换回内核自己的堆栈
   732 0000033E 8ED0                             mov ss,eax
   733 00000340 8B25[180D0000]                   mov esp,[esp_pointer]
   734                                  
   735 00000346 BB[D6040000]                     mov ebx,message_6
   736 0000034B 9A[00000000]2800                 call sys_routine_seg_sel:put_string
   737                                  
   738 00000352 F4                               hlt
   739                                              
   740                                  core_code_end:
   741                                  
   742                                  ;-------------------------------------------------------------------------------
   743                                  SECTION core_trail
   744                                  ;-------------------------------------------------------------------------------
   745                                  core_end:
