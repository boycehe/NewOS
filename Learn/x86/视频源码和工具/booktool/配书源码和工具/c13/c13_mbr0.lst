     1                                           ;文件名：c13_mbr0.asm
     2                                           ;文件说明：硬盘主引导扇区代码 
     3                                  
     4                                  ;-------------------------------------------------------------------------------
     5                                           core_base_address equ 0x00040000   ;常数，内核加载的起始内存地址 
     6                                           core_start_sector equ 0x00000001   ;常数，内核的起始逻辑扇区号
     7                                  
     8                                  ;-------------------------------------------------------------------------------         
     9                                           ;计算GDT所在的逻辑段地址
    10 00000000 2E66A1[917D]                     mov eax,[cs:pgdt+0x7c00+0x02]      ;GDT的32位物理地址 
    11 00000005 6631D2                           xor edx,edx
    12 00000008 66BB10000000                     mov ebx,16
    13 0000000E 66F7F3                           div ebx                            ;分解成16位逻辑地址 
    14                                  
    15 00000011 8ED8                             mov ds,eax                         ;令DS指向该段以进行操作
    16 00000013 6689D3                           mov ebx,edx                        ;段内起始偏移地址 
    17                                  
    18                                           ;跳过0#号描述符的槽位
    19                                  
    20                                           ;创建1#描述符，这是一个向上扩展的数据段，大小为4GB
    21 00000016 6667C74308FFFF0000               mov dword [ebx+0x08],0x0000ffff    ;基地址为0，段界限为0xFFFFF
    22 0000001F 6667C7430C0092CF00               mov dword [ebx+0x0c],0x00cf9200    ;粒度为4KB，存储器段描述符 
    23                                  
    24                                           ;创建保护模式下初始代码段描述符
    25 00000028 6667C74310FF01007C               mov dword [ebx+0x10],0x7c0001ff    ;基地址为0x00007c00，界限0x1FF 
    26 00000031 6667C7431400984000               mov dword [ebx+0x14],0x00409800    ;粒度为字节，代码段描述符
    27                                  
    28                                           ;建立保护模式下的堆栈段描述符      ;基地址为0x00007C00，界限0xFFFFE 
    29 0000003A 6667C74318FEFF007C               mov dword [ebx+0x18],0x7c00fffe    ;粒度为4KB 
    30 00000043 6667C7431C0096CF00               mov dword [ebx+0x1c],0x00cf9600
    31                                           
    32                                           ;建立保护模式下的显示缓冲区描述符   
    33 0000004C 6667C74320FF7F0080               mov dword [ebx+0x20],0x80007fff    ;基地址为0x000B8000，界限0x07FFF 
    34 00000055 6667C743240B924000               mov dword [ebx+0x24],0x0040920b    ;粒度为字节
    35                                           
    36                                           ;初始化描述符表寄存器GDTR
    37 0000005E 2EC706[8F7D]2700                 mov word [cs: pgdt+0x7c00],39      ;描述符表的界限   
    38                                   
    39 00000065 2E0F0116[8F7D]                   lgdt [cs: pgdt+0x7c00]
    40                                        
    41 0000006B E492                             in al,0x92                         ;南桥芯片内的端口 
    42 0000006D 0C02                             or al,0000_0010B
    43 0000006F E692                             out 0x92,al                        ;打开A20
    44                                  
    45 00000071 FA                               cli                                ;中断机制尚未工作
    46                                  
    47 00000072 0F20C0                           mov eax,cr0
    48 00000075 6683C801                         or eax,1
    49 00000079 0F22C0                           mov cr0,eax                        ;设置PE位
    50                                        
    51                                           ;以下进入保护模式... ...
    52 0000007C EA[8100]1000                     jmp 0x0010:flush                   ;清流水线并串行化处理器
    53                                  
    54                                           [bits 32]               
    55                                    flush:                                  
    56 00000081 B808000000                       mov eax,0x0008                     ;加载数据段(0..4GB)选择子
    57 00000086 8ED8                             mov ds,eax
    58                                  
    59 00000088 B818000000                       mov eax,0x0018                     ;加载堆栈段选择子 
    60 0000008D 8ED0                             mov ss,eax
    61 0000008F 31E4                             xor esp,esp                        ;堆栈指针 <- 0 
    62                                  
    63                                           ;以下加载系统核心程序 
    64 00000091 BF00000400                       mov edi,core_base_address 
    65                                        
    66 00000096 B801000000                       mov eax,core_start_sector
    67 0000009B 89FB                             mov ebx,edi                        ;起始地址 
    68 0000009D E88D000000                       call read_hard_disk_0              ;以下读取程序的起始部分（一个扇区） 
    69                                        
    70                                           ;以下判断整个程序有多大
    71 000000A2 8B07                             mov eax,[edi]                      ;核心程序尺寸
    72 000000A4 31D2                             xor edx,edx 
    73 000000A6 B900020000                       mov ecx,512                        ;512字节每扇区
    74 000000AB F7F1                             div ecx
    75                                  
    76 000000AD 09D2                             or edx,edx
    77 000000AF 7501                             jnz @1                             ;未除尽，因此结果比实际扇区数少1 
    78 000000B1 48                               dec eax                            ;已经读了一个扇区，扇区总数减1 
    79                                     @1:
    80 000000B2 09C0                             or eax,eax                         ;考虑实际长度≤512个字节的情况 
    81 000000B4 7410                             jz setup                           ;EAX=0 ?
    82                                  
    83                                           ;读取剩余的扇区
    84 000000B6 89C1                             mov ecx,eax                        ;32位模式下的LOOP使用ECX
    85 000000B8 B801000000                       mov eax,core_start_sector
    86 000000BD 40                               inc eax                            ;从下一个逻辑扇区接着读
    87                                     @2:
    88 000000BE E86C000000                       call read_hard_disk_0
    89 000000C3 40                               inc eax
    90 000000C4 E2F8                             loop @2                            ;循环读，直到读完整个内核 
    91                                  
    92                                   setup:
    93 000000C6 8B35[917D0000]                   mov esi,[0x7c00+pgdt+0x02]         ;不可以在代码段内寻址pgdt，但可以
    94                                                                              ;通过4GB的段来访问
    95                                           ;建立公用例程段描述符
    96 000000CC 8B4704                           mov eax,[edi+0x04]                 ;公用例程代码段起始汇编地址
    97 000000CF 8B5F08                           mov ebx,[edi+0x08]                 ;核心数据段汇编地址
    98 000000D2 29C3                             sub ebx,eax
    99 000000D4 4B                               dec ebx                            ;公用例程段界限 
   100 000000D5 01F8                             add eax,edi                        ;公用例程段基地址
   101 000000D7 B900984000                       mov ecx,0x00409800                 ;字节粒度的代码段描述符
   102 000000DC E893000000                       call make_gdt_descriptor
   103 000000E1 894628                           mov [esi+0x28],eax
   104 000000E4 89562C                           mov [esi+0x2c],edx
   105                                         
   106                                           ;建立核心数据段描述符
   107 000000E7 8B4708                           mov eax,[edi+0x08]                 ;核心数据段起始汇编地址
   108 000000EA 8B5F0C                           mov ebx,[edi+0x0c]                 ;核心代码段汇编地址 
   109 000000ED 29C3                             sub ebx,eax
   110 000000EF 4B                               dec ebx                            ;核心数据段界限
   111 000000F0 01F8                             add eax,edi                        ;核心数据段基地址
   112 000000F2 B900924000                       mov ecx,0x00409200                 ;字节粒度的数据段描述符 
   113 000000F7 E878000000                       call make_gdt_descriptor
   114 000000FC 894630                           mov [esi+0x30],eax
   115 000000FF 895634                           mov [esi+0x34],edx 
   116                                        
   117                                           ;建立核心代码段描述符
   118 00000102 8B470C                           mov eax,[edi+0x0c]                 ;核心代码段起始汇编地址
   119 00000105 8B1F                             mov ebx,[edi+0x00]                 ;程序总长度
   120 00000107 29C3                             sub ebx,eax
   121 00000109 4B                               dec ebx                            ;核心代码段界限
   122 0000010A 01F8                             add eax,edi                        ;核心代码段基地址
   123 0000010C B900984000                       mov ecx,0x00409800                 ;字节粒度的代码段描述符
   124 00000111 E85E000000                       call make_gdt_descriptor
   125 00000116 894638                           mov [esi+0x38],eax
   126 00000119 89563C                           mov [esi+0x3c],edx
   127                                  
   128 0000011C 66C705[8F7D0000]3F-              mov word [0x7c00+pgdt],63          ;描述符表的界限
   128 00000124 00                 
   129                                                                          
   130 00000125 0F0115[8F7D0000]                 lgdt [0x7c00+pgdt]                  
   131                                  
   132 0000012C FF6F10                           jmp far [edi+0x10]  
   133                                         
   134                                  ;-------------------------------------------------------------------------------
   135                                  read_hard_disk_0:                        ;从硬盘读取一个逻辑扇区
   136                                                                           ;EAX=逻辑扇区号
   137                                                                           ;DS:EBX=目标缓冲区地址
   138                                                                           ;返回：EBX=EBX+512 
   139 0000012F 50                               push eax 
   140 00000130 51                               push ecx
   141 00000131 52                               push edx
   142                                        
   143 00000132 50                               push eax
   144                                           
   145 00000133 66BAF201                         mov dx,0x1f2
   146 00000137 B001                             mov al,1
   147 00000139 EE                               out dx,al                       ;读取的扇区数
   148                                  
   149 0000013A 6642                             inc dx                          ;0x1f3
   150 0000013C 58                               pop eax
   151 0000013D EE                               out dx,al                       ;LBA地址7~0
   152                                  
   153 0000013E 6642                             inc dx                          ;0x1f4
   154 00000140 B108                             mov cl,8
   155 00000142 D3E8                             shr eax,cl
   156 00000144 EE                               out dx,al                       ;LBA地址15~8
   157                                  
   158 00000145 6642                             inc dx                          ;0x1f5
   159 00000147 D3E8                             shr eax,cl
   160 00000149 EE                               out dx,al                       ;LBA地址23~16
   161                                  
   162 0000014A 6642                             inc dx                          ;0x1f6
   163 0000014C D3E8                             shr eax,cl
   164 0000014E 0CE0                             or al,0xe0                      ;第一硬盘  LBA地址27~24
   165 00000150 EE                               out dx,al
   166                                  
   167 00000151 6642                             inc dx                          ;0x1f7
   168 00000153 B020                             mov al,0x20                     ;读命令
   169 00000155 EE                               out dx,al
   170                                  
   171                                    .waits:
   172 00000156 EC                               in al,dx
   173 00000157 2488                             and al,0x88
   174 00000159 3C08                             cmp al,0x08
   175 0000015B 75F9                             jnz .waits                      ;不忙，且硬盘已准备好数据传输 
   176                                  
   177 0000015D B900010000                       mov ecx,256                     ;总共要读取的字数
   178 00000162 66BAF001                         mov dx,0x1f0
   179                                    .readw:
   180 00000166 66ED                             in ax,dx
   181 00000168 668903                           mov [ebx],ax
   182 0000016B 83C302                           add ebx,2
   183 0000016E E2F6                             loop .readw
   184                                  
   185 00000170 5A                               pop edx
   186 00000171 59                               pop ecx
   187 00000172 58                               pop eax
   188                                        
   189 00000173 C3                               ret
   190                                  
   191                                  ;-------------------------------------------------------------------------------
   192                                  make_gdt_descriptor:                     ;构造描述符
   193                                                                           ;输入：EAX=线性基地址
   194                                                                           ;      EBX=段界限
   195                                                                           ;      ECX=属性（各属性位都在原始
   196                                                                           ;      位置，其它没用到的位置0） 
   197                                                                           ;返回：EDX:EAX=完整的描述符
   198 00000174 89C2                             mov edx,eax
   199 00000176 C1E010                           shl eax,16                     
   200 00000179 6609D8                           or ax,bx                        ;描述符前32位(EAX)构造完毕
   201                                        
   202 0000017C 81E20000FFFF                     and edx,0xffff0000              ;清除基地址中无关的位
   203 00000182 C1C208                           rol edx,8
   204 00000185 0FCA                             bswap edx                       ;装配基址的31~24和23~16  (80486+)
   205                                        
   206 00000187 6631DB                           xor bx,bx
   207 0000018A 09DA                             or edx,ebx                      ;装配段界限的高4位
   208                                        
   209 0000018C 09CA                             or edx,ecx                      ;装配属性 
   210                                        
   211 0000018E C3                               ret
   212                                        
   213                                  ;-------------------------------------------------------------------------------
   214 0000018F 0000                             pgdt             dw 0
   215 00000191 007E0000                                          dd 0x00007e00      ;GDT的物理地址
   216                                  ;-------------------------------------------------------------------------------                             
   217 00000195 00<rep 69h>                      times 510-($-$$) db 0
   218 000001FE 55AA                                              db 0x55,0xaa
