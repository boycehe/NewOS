     1                                  
     2                                           core_base_address equ 0x00040000   ;常数，内核加载的起始内存地址 
     3                                           core_start_sector equ 0x00000001   ;常数，内核的起始逻辑扇区号 
     4                                  
     5                                  ;===============================================================================
     6                                  SECTION  mbr  vstart=0x00007c00         
     7                                  
     8 00000000 8CC8                             mov ax,cs      
     9 00000002 8ED0                             mov ss,ax
    10 00000004 BC007C                           mov sp,0x7c00
    11                                        
    12                                           ;计算GDT所在的逻辑段地址
    13 00000007 2E66A1[6901]                     mov eax,[cs:pgdt+0x02]             ;GDT的32位物理地址 
    14 0000000C 6631D2                           xor edx,edx
    15 0000000F 66BB10000000                     mov ebx,16
    16 00000015 66F7F3                           div ebx                            ;分解成16位逻辑地址 
    17                                  
    18 00000018 8ED8                             mov ds,eax                         ;令DS指向该段以进行操作
    19 0000001A 6689D3                           mov ebx,edx                        ;段内起始偏移地址 
    20                                  
    21                                           ;跳过0#号描述符的槽位 
    22                                           ;创建1#描述符，保护模式下的代码段描述符
    23 0000001D 6667C74308FFFF0000               mov dword [ebx+0x08],0x0000ffff    ;基地址为0，界限0xFFFFF，DPL=00 
    24 00000026 6667C7430C0098CF00               mov dword [ebx+0x0c],0x00cf9800    ;4KB粒度，代码段描述符，向上扩展 
    25                                  
    26                                           ;创建2#描述符，保护模式下的数据段和堆栈段描述符 
    27 0000002F 6667C74310FFFF0000               mov dword [ebx+0x10],0x0000ffff    ;基地址为0，界限0xFFFFF，DPL=00
    28 00000038 6667C743140092CF00               mov dword [ebx+0x14],0x00cf9200    ;4KB粒度，数据段描述符，向上扩展 
    29                                  
    30                                           ;初始化描述符表寄存器GDTR
    31 00000041 2EC706[6701]1700                 mov word [cs: pgdt],23             ;描述符表的界限   
    32                                   
    33 00000048 2E0F0116[6701]                   lgdt [cs: pgdt]
    34                                        
    35 0000004E E492                             in al,0x92                         ;南桥芯片内的端口 
    36 00000050 0C02                             or al,0000_0010B
    37 00000052 E692                             out 0x92,al                        ;打开A20
    38                                  
    39 00000054 FA                               cli                                ;中断机制尚未工作
    40                                  
    41 00000055 0F20C0                           mov eax,cr0                  
    42 00000058 6683C801                         or eax,1
    43 0000005C 0F22C0                           mov cr0,eax                        ;设置PE位
    44                                        
    45                                           ;以下进入保护模式... ...
    46 0000005F 66EA[67000000]0800               jmp dword 0x0008:flush             ;16位的描述符选择子：32位偏移
    47                                                                              ;清流水线并串行化处理器
    48                                           [bits 32]               
    49                                    flush:                                  
    50 00000067 B810000000                       mov eax,0x00010                    ;加载数据段(4GB)选择子
    51 0000006C 8ED8                             mov ds,eax
    52 0000006E 8EC0                             mov es,eax
    53 00000070 8EE0                             mov fs,eax
    54 00000072 8EE8                             mov gs,eax
    55 00000074 8ED0                             mov ss,eax                         ;加载堆栈段(4GB)选择子
    56 00000076 BC00700000                       mov esp,0x7000                     ;堆栈指针
    57                                           
    58                                           ;以下加载系统核心程序
    59 0000007B BF00000400                       mov edi,core_base_address
    60                                  
    61 00000080 B801000000                       mov eax,core_start_sector
    62 00000085 89FB                             mov ebx,edi                        ;起始地址
    63 00000087 E896000000                       call read_hard_disk_0              ;以下读取程序的起始部分（一个扇区）
    64                                  
    65                                           ;以下判断整个程序有多大
    66 0000008C 8B07                             mov eax,[edi]                      ;核心程序尺寸
    67 0000008E 31D2                             xor edx,edx
    68 00000090 B900020000                       mov ecx,512                        ;512字节每扇区
    69 00000095 F7F1                             div ecx
    70                                  
    71 00000097 09D2                             or edx,edx
    72 00000099 7501                             jnz @1                             ;未除尽，因此结果比实际扇区数少1
    73 0000009B 48                               dec eax                            ;已经读了一个扇区，扇区总数减1
    74                                     @1:
    75 0000009C 09C0                             or eax,eax                         ;考虑实际长度≤512个字节的情况
    76 0000009E 7410                             jz pge                             ;EAX=0 ?
    77                                  
    78                                           ;读取剩余的扇区
    79 000000A0 89C1                             mov ecx,eax                        ;32位模式下的LOOP使用ECX
    80 000000A2 B801000000                       mov eax,core_start_sector
    81 000000A7 40                               inc eax                            ;从下一个逻辑扇区接着读
    82                                     @2:
    83 000000A8 E875000000                       call read_hard_disk_0
    84 000000AD 40                               inc eax
    85 000000AE E2F8                             loop @2                            ;循环读，直到读完整个内核
    86                                  
    87                                     pge:
    88                                           ;准备打开分页机制。从此，再也不用在段之间转来转去，实在晕乎~ 
    89                                           
    90                                           ;创建系统内核的页目录表PDT
    91 000000B0 BB00000200                       mov ebx,0x00020000                 ;页目录表PDT的物理地址
    92                                           
    93                                           ;在页目录内创建指向页目录表自己的目录项
    94 000000B5 C783FC0F0000030002-              mov dword [ebx+4092],0x00020003 
    94 000000BE 00                 
    95                                  
    96 000000BF BA03100200                       mov edx,0x00021003                 ;MBR空间有限，后面尽量不使用立即数
    97                                           ;在页目录内创建与线性地址0x00000000对应的目录项
    98 000000C4 8913                             mov [ebx+0x000],edx                ;写入目录项（页表的物理地址和属性）      
    99                                                                              ;此目录项仅用于过渡。
   100                                           ;在页目录内创建与线性地址0x80000000对应的目录项
   101 000000C6 899300080000                     mov [ebx+0x800],edx                ;写入目录项（页表的物理地址和属性）
   102                                  
   103                                           ;创建与上面那个目录项相对应的页表，初始化页表项 
   104 000000CC BB00100200                       mov ebx,0x00021000                 ;页表的物理地址
   105 000000D1 31C0                             xor eax,eax                        ;起始页的物理地址 
   106 000000D3 31F6                             xor esi,esi
   107                                    .b1:       
   108 000000D5 89C2                             mov edx,eax
   109 000000D7 83CA03                           or edx,0x00000003                                                      
   110 000000DA 8914B3                           mov [ebx+esi*4],edx                ;登记页的物理地址
   111 000000DD 0500100000                       add eax,0x1000                     ;下一个相邻页的物理地址 
   112 000000E2 46                               inc esi
   113 000000E3 81FE00010000                     cmp esi,256                        ;仅低端1MB内存对应的页才是有效的 
   114 000000E9 7CEA                             jl .b1
   115                                           
   116                                           ;令CR3寄存器指向页目录，并正式开启页功能 
   117 000000EB B800000200                       mov eax,0x00020000                 ;PCD=PWT=0
   118 000000F0 0F22D8                           mov cr3,eax
   119                                  
   120                                           ;将GDT的线性地址映射到从0x80000000开始的相同位置 
   121 000000F3 0F0105[67010000]                 sgdt [pgdt]
   122                                           ;mov ebx,[pgdt+2]
   123 000000FA 8105[69010000]0000-              add dword [pgdt+2],0x80000000      ;GDTR也用的是线性地址
   123 00000102 0080               
   124 00000104 0F0115[67010000]                 lgdt [pgdt]
   125                                  
   126 0000010B 0F20C0                           mov eax,cr0
   127 0000010E 0D00000080                       or eax,0x80000000
   128 00000113 0F22C0                           mov cr0,eax                        ;开启分页机制
   129                                     
   130                                           ;将堆栈映射到高端，这是非常容易被忽略的一件事。应当把内核的所有东西
   131                                           ;都移到高端，否则，一定会和正在加载的用户任务局部空间里的内容冲突，
   132                                           ;而且很难想到问题会出在这里。 
   133 00000116 81C400000080                     add esp,0x80000000                 
   134                                                                               
   135 0000011C FF2504000480                     jmp [0x80040004]  
   136                                         
   137                                  ;-------------------------------------------------------------------------------
   138                                  read_hard_disk_0:                           ;从硬盘读取一个逻辑扇区
   139                                                                              ;EAX=逻辑扇区号
   140                                                                              ;DS:EBX=目标缓冲区地址
   141                                                                              ;返回：EBX=EBX+512 
   142 00000122 50                               push eax 
   143 00000123 51                               push ecx
   144 00000124 52                               push edx
   145                                        
   146 00000125 50                               push eax
   147                                           
   148 00000126 66BAF201                         mov dx,0x1f2
   149 0000012A B001                             mov al,1
   150 0000012C EE                               out dx,al                          ;读取的扇区数
   151                                  
   152 0000012D 6642                             inc dx                             ;0x1f3
   153 0000012F 58                               pop eax
   154 00000130 EE                               out dx,al                          ;LBA地址7~0
   155                                  
   156 00000131 6642                             inc dx                             ;0x1f4
   157 00000133 B108                             mov cl,8
   158 00000135 D3E8                             shr eax,cl
   159 00000137 EE                               out dx,al                          ;LBA地址15~8
   160                                  
   161 00000138 6642                             inc dx                             ;0x1f5
   162 0000013A D3E8                             shr eax,cl
   163 0000013C EE                               out dx,al                          ;LBA地址23~16
   164                                  
   165 0000013D 6642                             inc dx                             ;0x1f6
   166 0000013F D3E8                             shr eax,cl
   167 00000141 0CE0                             or al,0xe0                         ;第一硬盘  LBA地址27~24
   168 00000143 EE                               out dx,al
   169                                  
   170 00000144 6642                             inc dx                             ;0x1f7
   171 00000146 B020                             mov al,0x20                        ;读命令
   172 00000148 EE                               out dx,al
   173                                  
   174                                    .waits:
   175 00000149 EC                               in al,dx
   176 0000014A 2488                             and al,0x88
   177 0000014C 3C08                             cmp al,0x08
   178 0000014E 75F9                             jnz .waits                         ;不忙，且硬盘已准备好数据传输 
   179                                  
   180 00000150 B900010000                       mov ecx,256                        ;总共要读取的字数
   181 00000155 66BAF001                         mov dx,0x1f0
   182                                    .readw:
   183 00000159 66ED                             in ax,dx
   184 0000015B 668903                           mov [ebx],ax
   185 0000015E 83C302                           add ebx,2
   186 00000161 E2F6                             loop .readw
   187                                  
   188 00000163 5A                               pop edx
   189 00000164 59                               pop ecx
   190 00000165 58                               pop eax
   191                                        
   192 00000166 C3                               ret
   193                                  
   194                                  ;-------------------------------------------------------------------------------
   195 00000167 0000                             pgdt             dw 0
   196 00000169 00800000                                          dd 0x00008000     ;GDT的物理/线性地址
   197                                  ;-------------------------------------------------------------------------------                             
   198 0000016D 00<rep 91h>                      times 510-($-$$) db 0
   199 000001FE 55AA                                              db 0x55,0xaa
