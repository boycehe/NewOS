     1                                           ;代码清单16-1
     2                                           ;文件名：c16_core.asm
     3                                           ;文件说明：保护模式微型核心程序 
     4                                           ;创建日期：2012-06-20 00:05
     5                                  
     6                                           ;以下常量定义部分。内核的大部分内容都应当固定
     7                                           core_code_seg_sel     equ  0x38    ;内核代码段选择子
     8                                           core_data_seg_sel     equ  0x30    ;内核数据段选择子 
     9                                           sys_routine_seg_sel   equ  0x28    ;系统公共例程代码段的选择子 
    10                                           video_ram_seg_sel     equ  0x20    ;视频显示缓冲区的段选择子
    11                                           core_stack_seg_sel    equ  0x18    ;内核堆栈段选择子
    12                                           mem_0_4_gb_seg_sel    equ  0x08    ;整个0-4GB内存的段的选择子
    13                                  
    14                                  ;-------------------------------------------------------------------------------
    15                                           ;以下是系统核心的头部，用于加载核心程序 
    16 00000000 [00000000]                       core_length      dd core_end       ;核心程序总长度#00
    17                                  
    18 00000004 [00000000]                       sys_routine_seg  dd section.sys_routine.start
    19                                                                              ;系统公用例程段位置#04
    20                                  
    21 00000008 [00000000]                       core_data_seg    dd section.core_data.start
    22                                                                              ;核心数据段位置#08
    23                                  
    24 0000000C [00000000]                       core_code_seg    dd section.core_code.start
    25                                                                              ;核心代码段位置#0c
    26                                  
    27                                  
    28 00000010 [8F030000]                       core_entry       dd start          ;核心代码段入口点#10
    29 00000014 3800                                              dw core_code_seg_sel
    30                                  
    31                                  ;===============================================================================
    32                                           [bits 32]
    33                                  ;===============================================================================
    34                                  SECTION sys_routine vstart=0                ;系统公共例程代码段 
    35                                  ;-------------------------------------------------------------------------------
    36                                           ;字符串显示例程
    37                                  put_string:                                 ;显示0终止的字符串并移动光标 
    38                                                                              ;输入：DS:EBX=串地址
    39 00000000 51                               push ecx
    40                                    .getc:
    41 00000001 8A0B                             mov cl,[ebx]
    42 00000003 08C9                             or cl,cl
    43 00000005 7408                             jz .exit
    44 00000007 E805000000                       call put_char
    45 0000000C 43                               inc ebx
    46 0000000D EBF2                             jmp .getc
    47                                  
    48                                    .exit:
    49 0000000F 59                               pop ecx
    50 00000010 CB                               retf                               ;段间返回
    51                                  
    52                                  ;-------------------------------------------------------------------------------
    53                                  put_char:                                   ;在当前光标处显示一个字符,并推进
    54                                                                              ;光标。仅用于段内调用 
    55                                                                              ;输入：CL=字符ASCII码 
    56 00000011 60                               pushad
    57                                  
    58                                           ;以下取当前光标位置
    59 00000012 66BAD403                         mov dx,0x3d4
    60 00000016 B00E                             mov al,0x0e
    61 00000018 EE                               out dx,al
    62 00000019 6642                             inc dx                             ;0x3d5
    63 0000001B EC                               in al,dx                           ;高字
    64 0000001C 88C4                             mov ah,al
    65                                  
    66 0000001E 664A                             dec dx                             ;0x3d4
    67 00000020 B00F                             mov al,0x0f
    68 00000022 EE                               out dx,al
    69 00000023 6642                             inc dx                             ;0x3d5
    70 00000025 EC                               in al,dx                           ;低字
    71 00000026 6689C3                           mov bx,ax                          ;BX=代表光标位置的16位数
    72                                  
    73 00000029 80F90D                           cmp cl,0x0d                        ;回车符？
    74 0000002C 750E                             jnz .put_0a
    75 0000002E 6689D8                           mov ax,bx
    76 00000031 B350                             mov bl,80
    77 00000033 F6F3                             div bl
    78 00000035 F6E3                             mul bl
    79 00000037 6689C3                           mov bx,ax
    80 0000003A EB60                             jmp .set_cursor
    81                                  
    82                                    .put_0a:
    83 0000003C 80F90A                           cmp cl,0x0a                        ;换行符？
    84 0000003F 7506                             jnz .put_other
    85 00000041 6683C350                         add bx,80
    86 00000045 EB15                             jmp .roll_screen
    87                                  
    88                                    .put_other:                               ;正常显示字符
    89 00000047 06                               push es
    90 00000048 B820000000                       mov eax,video_ram_seg_sel          ;0x800b8000段的选择子
    91 0000004D 8EC0                             mov es,eax
    92 0000004F 66D1E3                           shl bx,1
    93 00000052 2667880F                         mov [es:bx],cl
    94 00000056 07                               pop es
    95                                  
    96                                           ;以下将光标位置推进一个字符
    97 00000057 66D1EB                           shr bx,1
    98 0000005A 6643                             inc bx
    99                                  
   100                                    .roll_screen:
   101 0000005C 6681FBD007                       cmp bx,2000                        ;光标超出屏幕？滚屏
   102 00000061 7C39                             jl .set_cursor
   103                                  
   104 00000063 1E                               push ds
   105 00000064 06                               push es
   106 00000065 B820000000                       mov eax,video_ram_seg_sel
   107 0000006A 8ED8                             mov ds,eax
   108 0000006C 8EC0                             mov es,eax
   109 0000006E FC                               cld
   110 0000006F BEA0000000                       mov esi,0xa0                       ;小心！32位模式下movsb/w/d 
   111 00000074 BF00000000                       mov edi,0x00                       ;使用的是esi/edi/ecx 
   112 00000079 B980070000                       mov ecx,1920
   113 0000007E F3A5                             rep movsd
   114 00000080 66BB000F                         mov bx,3840                        ;清除屏幕最底一行
   115 00000084 B950000000                       mov ecx,80                         ;32位程序应该使用ECX
   116                                    .cls:
   117 00000089 266667C7072007                   mov word[es:bx],0x0720
   118 00000090 6683C302                         add bx,2
   119 00000094 E2F3                             loop .cls
   120                                  
   121 00000096 07                               pop es
   122 00000097 1F                               pop ds
   123                                  
   124 00000098 66BB8007                         mov bx,1920
   125                                  
   126                                    .set_cursor:
   127 0000009C 66BAD403                         mov dx,0x3d4
   128 000000A0 B00E                             mov al,0x0e
   129 000000A2 EE                               out dx,al
   130 000000A3 6642                             inc dx                             ;0x3d5
   131 000000A5 88F8                             mov al,bh
   132 000000A7 EE                               out dx,al
   133 000000A8 664A                             dec dx                             ;0x3d4
   134 000000AA B00F                             mov al,0x0f
   135 000000AC EE                               out dx,al
   136 000000AD 6642                             inc dx                             ;0x3d5
   137 000000AF 88D8                             mov al,bl
   138 000000B1 EE                               out dx,al
   139                                  
   140 000000B2 61                               popad
   141                                           
   142 000000B3 C3                               ret                                
   143                                  
   144                                  ;-------------------------------------------------------------------------------
   145                                  read_hard_disk_0:                           ;从硬盘读取一个逻辑扇区
   146                                                                              ;EAX=逻辑扇区号
   147                                                                              ;DS:EBX=目标缓冲区地址
   148                                                                              ;返回：EBX=EBX+512
   149 000000B4 50                               push eax 
   150 000000B5 51                               push ecx
   151 000000B6 52                               push edx
   152                                        
   153 000000B7 50                               push eax
   154                                           
   155 000000B8 66BAF201                         mov dx,0x1f2
   156 000000BC B001                             mov al,1
   157 000000BE EE                               out dx,al                          ;读取的扇区数
   158                                  
   159 000000BF 6642                             inc dx                             ;0x1f3
   160 000000C1 58                               pop eax
   161 000000C2 EE                               out dx,al                          ;LBA地址7~0
   162                                  
   163 000000C3 6642                             inc dx                             ;0x1f4
   164 000000C5 B108                             mov cl,8
   165 000000C7 D3E8                             shr eax,cl
   166 000000C9 EE                               out dx,al                          ;LBA地址15~8
   167                                  
   168 000000CA 6642                             inc dx                             ;0x1f5
   169 000000CC D3E8                             shr eax,cl
   170 000000CE EE                               out dx,al                          ;LBA地址23~16
   171                                  
   172 000000CF 6642                             inc dx                             ;0x1f6
   173 000000D1 D3E8                             shr eax,cl
   174 000000D3 0CE0                             or al,0xe0                         ;第一硬盘  LBA地址27~24
   175 000000D5 EE                               out dx,al
   176                                  
   177 000000D6 6642                             inc dx                             ;0x1f7
   178 000000D8 B020                             mov al,0x20                        ;读命令
   179 000000DA EE                               out dx,al
   180                                  
   181                                    .waits:
   182 000000DB EC                               in al,dx
   183 000000DC 2488                             and al,0x88
   184 000000DE 3C08                             cmp al,0x08
   185 000000E0 75F9                             jnz .waits                         ;不忙，且硬盘已准备好数据传输 
   186                                  
   187 000000E2 B900010000                       mov ecx,256                        ;总共要读取的字数
   188 000000E7 66BAF001                         mov dx,0x1f0
   189                                    .readw:
   190 000000EB 66ED                             in ax,dx
   191 000000ED 668903                           mov [ebx],ax
   192 000000F0 83C302                           add ebx,2
   193 000000F3 E2F6                             loop .readw
   194                                  
   195 000000F5 5A                               pop edx
   196 000000F6 59                               pop ecx
   197 000000F7 58                               pop eax
   198                                        
   199 000000F8 CB                               retf                               ;段间返回 
   200                                  
   201                                  ;-------------------------------------------------------------------------------
   202                                  ;汇编语言程序是极难一次成功，而且调试非常困难。这个例程可以提供帮助 
   203                                  put_hex_dword:                              ;在当前光标处以十六进制形式显示
   204                                                                              ;一个双字并推进光标 
   205                                                                              ;输入：EDX=要转换并显示的数字
   206                                                                              ;输出：无
   207 000000F9 60                               pushad
   208 000000FA 1E                               push ds
   209                                        
   210 000000FB 66B83000                         mov ax,core_data_seg_sel           ;切换到核心数据段 
   211 000000FF 8ED8                             mov ds,ax
   212                                        
   213 00000101 BB[3C050000]                     mov ebx,bin_hex                    ;指向核心数据段内的转换表
   214 00000106 B908000000                       mov ecx,8
   215                                    .xlt:    
   216 0000010B C1C204                           rol edx,4
   217 0000010E 89D0                             mov eax,edx
   218 00000110 83E00F                           and eax,0x0000000f
   219 00000113 D7                               xlat
   220                                        
   221 00000114 51                               push ecx
   222 00000115 88C1                             mov cl,al                           
   223 00000117 E8F5FEFFFF                       call put_char
   224 0000011C 59                               pop ecx
   225                                         
   226 0000011D E2EC                             loop .xlt
   227                                        
   228 0000011F 1F                               pop ds
   229 00000120 61                               popad
   230                                           
   231 00000121 CB                               retf
   232                                        
   233                                  ;-------------------------------------------------------------------------------
   234                                  set_up_gdt_descriptor:                      ;在GDT内安装一个新的描述符
   235                                                                              ;输入：EDX:EAX=描述符 
   236                                                                              ;输出：CX=描述符的选择子
   237 00000122 50                               push eax
   238 00000123 53                               push ebx
   239 00000124 52                               push edx
   240                                  
   241 00000125 1E                               push ds
   242 00000126 06                               push es
   243                                  
   244 00000127 BB30000000                       mov ebx,core_data_seg_sel          ;切换到核心数据段
   245 0000012C 8EDB                             mov ds,ebx
   246                                  
   247 0000012E 0F0105[00000000]                 sgdt [pgdt]                        ;以便开始处理GDT
   248                                  
   249 00000135 BB08000000                       mov ebx,mem_0_4_gb_seg_sel
   250 0000013A 8EC3                             mov es,ebx
   251                                  
   252 0000013C 0FB71D[00000000]                 movzx ebx,word [pgdt]              ;GDT界限
   253 00000143 6643                             inc bx                             ;GDT总字节数，也是下一个描述符偏移
   254 00000145 031D[02000000]                   add ebx,[pgdt+2]                   ;下一个描述符的线性地址
   255                                  
   256 0000014B 268903                           mov [es:ebx],eax
   257 0000014E 26895304                         mov [es:ebx+4],edx
   258                                  
   259 00000152 668305[00000000]08               add word [pgdt],8                  ;增加一个描述符的大小
   260                                  
   261 0000015A 0F0115[00000000]                 lgdt [pgdt]                        ;对GDT的更改生效
   262                                  
   263 00000161 66A1[00000000]                   mov ax,[pgdt]                      ;得到GDT界限值
   264 00000167 6631D2                           xor dx,dx
   265 0000016A 66BB0800                         mov bx,8
   266 0000016E 66F7F3                           div bx                             ;除以8，去掉余数
   267 00000171 6689C1                           mov cx,ax
   268 00000174 66C1E103                         shl cx,3                           ;将索引号移到正确位置
   269                                  
   270 00000178 07                               pop es
   271 00000179 1F                               pop ds
   272                                  
   273 0000017A 5A                               pop edx
   274 0000017B 5B                               pop ebx
   275 0000017C 58                               pop eax
   276                                  
   277 0000017D CB                               retf
   278                                  ;-------------------------------------------------------------------------------
   279                                  make_seg_descriptor:                        ;构造存储器和系统的段描述符
   280                                                                              ;输入：EAX=线性基地址
   281                                                                              ;      EBX=段界限
   282                                                                              ;      ECX=属性。各属性位都在原始
   283                                                                              ;          位置，无关的位清零 
   284                                                                              ;返回：EDX:EAX=描述符
   285 0000017E 89C2                             mov edx,eax
   286 00000180 C1E010                           shl eax,16
   287 00000183 6609D8                           or ax,bx                           ;描述符前32位(EAX)构造完毕
   288                                  
   289 00000186 81E20000FFFF                     and edx,0xffff0000                 ;清除基地址中无关的位
   290 0000018C C1C208                           rol edx,8
   291 0000018F 0FCA                             bswap edx                          ;装配基址的31~24和23~16  (80486+)
   292                                  
   293 00000191 6631DB                           xor bx,bx
   294 00000194 09DA                             or edx,ebx                         ;装配段界限的高4位
   295                                  
   296 00000196 09CA                             or edx,ecx                         ;装配属性
   297                                  
   298 00000198 CB                               retf
   299                                  
   300                                  ;-------------------------------------------------------------------------------
   301                                  make_gate_descriptor:                       ;构造门的描述符（调用门等）
   302                                                                              ;输入：EAX=门代码在段内偏移地址
   303                                                                              ;       BX=门代码所在段的选择子 
   304                                                                              ;       CX=段类型及属性等（各属
   305                                                                              ;          性位都在原始位置）
   306                                                                              ;返回：EDX:EAX=完整的描述符
   307 00000199 53                               push ebx
   308 0000019A 51                               push ecx
   309                                        
   310 0000019B 89C2                             mov edx,eax
   311 0000019D 81E20000FFFF                     and edx,0xffff0000                 ;得到偏移地址高16位 
   312 000001A3 6609CA                           or dx,cx                           ;组装属性部分到EDX
   313                                         
   314 000001A6 25FFFF0000                       and eax,0x0000ffff                 ;得到偏移地址低16位 
   315 000001AB C1E310                           shl ebx,16                          
   316 000001AE 09D8                             or eax,ebx                         ;组装段选择子部分
   317                                        
   318 000001B0 59                               pop ecx
   319 000001B1 5B                               pop ebx
   320                                        
   321 000001B2 CB                               retf                                   
   322                                                               
   323                                  ;-------------------------------------------------------------------------------
   324                                  allocate_a_4k_page:                         ;分配一个4KB的页
   325                                                                              ;输入：无
   326                                                                              ;输出：EAX=页的物理地址
   327 000001B3 53                               push ebx
   328 000001B4 51                               push ecx
   329 000001B5 52                               push edx
   330 000001B6 1E                               push ds
   331                                           
   332 000001B7 B830000000                       mov eax,core_data_seg_sel
   333 000001BC 8ED8                             mov ds,eax
   334                                           
   335 000001BE 31C0                             xor eax,eax
   336                                    .b1:
   337 000001C0 0FAB05[06000000]                 bts [page_bit_map],eax
   338 000001C7 7315                             jnc .b2
   339 000001C9 40                               inc eax
   340 000001CA 3D00020000                       cmp eax,page_map_len*8
   341 000001CF 7CEF                             jl .b1
   342                                           
   343 000001D1 BB[EF040000]                     mov ebx,message_3
   344 000001D6 9A[00000000]2800                 call sys_routine_seg_sel:put_string
   345 000001DD F4                               hlt                                ;没有可以分配的页，停机 
   346                                           
   347                                    .b2:
   348 000001DE C1E00C                           shl eax,12                         ;乘以4096（0x1000） 
   349                                           
   350 000001E1 1F                               pop ds
   351 000001E2 5A                               pop edx
   352 000001E3 59                               pop ecx
   353 000001E4 5B                               pop ebx
   354                                           
   355 000001E5 C3                               ret
   356                                           
   357                                  ;-------------------------------------------------------------------------------
   358                                  alloc_inst_a_page:                          ;分配一个页，并安装在当前活动的
   359                                                                              ;层级分页结构中
   360                                                                              ;输入：EBX=页的线性地址
   361 000001E6 50                               push eax
   362 000001E7 53                               push ebx
   363 000001E8 56                               push esi
   364 000001E9 1E                               push ds
   365                                           
   366 000001EA B808000000                       mov eax,mem_0_4_gb_seg_sel
   367 000001EF 8ED8                             mov ds,eax
   368                                           
   369                                           ;检查该线性地址所对应的页表是否存在
   370 000001F1 89DE                             mov esi,ebx
   371 000001F3 81E60000C0FF                     and esi,0xffc00000
   372 000001F9 C1EE14                           shr esi,20                         ;得到页目录索引，并乘以4 
   373 000001FC 81CE00F0FFFF                     or esi,0xfffff000                  ;页目录自身的线性地址+表内偏移 
   374                                  
   375 00000202 F70601000000                     test dword [esi],0x00000001        ;P位是否为“1”。检查该线性地址是 
   376 00000208 750A                             jnz .b1                            ;否已经有对应的页表
   377                                            
   378                                           ;创建该线性地址所对应的页表 
   379 0000020A E8A4FFFFFF                       call allocate_a_4k_page            ;分配一个页做为页表 
   380 0000020F 83C807                           or eax,0x00000007
   381 00000212 8906                             mov [esi],eax                      ;在页目录中登记该页表
   382                                            
   383                                    .b1:
   384                                           ;开始访问该线性地址所对应的页表 
   385 00000214 89DE                             mov esi,ebx
   386 00000216 C1EE0A                           shr esi,10
   387 00000219 81E600F03F00                     and esi,0x003ff000                 ;或者0xfffff000，因高10位是零 
   388 0000021F 81CE0000C0FF                     or esi,0xffc00000                  ;得到该页表的线性地址
   389                                           
   390                                           ;得到该线性地址在页表内的对应条目（页表项） 
   391 00000225 81E300F03F00                     and ebx,0x003ff000
   392 0000022B C1EB0A                           shr ebx,10                         ;相当于右移12位，再乘以4
   393 0000022E 09DE                             or esi,ebx                         ;页表项的线性地址 
   394 00000230 E87EFFFFFF                       call allocate_a_4k_page            ;分配一个页，这才是要安装的页
   395 00000235 83C807                           or eax,0x00000007
   396 00000238 8906                             mov [esi],eax 
   397                                            
   398 0000023A 1F                               pop ds
   399 0000023B 5E                               pop esi
   400 0000023C 5B                               pop ebx
   401 0000023D 58                               pop eax
   402                                           
   403 0000023E CB                               retf  
   404                                  
   405                                  ;-------------------------------------------------------------------------------
   406                                  create_copy_cur_pdir:                       ;创建新页目录，并复制当前页目录内容
   407                                                                              ;输入：无
   408                                                                              ;输出：EAX=新页目录的物理地址 
   409 0000023F 1E                               push ds
   410 00000240 06                               push es
   411 00000241 56                               push esi
   412 00000242 57                               push edi
   413 00000243 53                               push ebx
   414 00000244 51                               push ecx
   415                                           
   416 00000245 BB08000000                       mov ebx,mem_0_4_gb_seg_sel
   417 0000024A 8EDB                             mov ds,ebx
   418 0000024C 8EC3                             mov es,ebx
   419                                  
   420 0000024E E860FFFFFF                       call allocate_a_4k_page            
   421 00000253 89C3                             mov ebx,eax
   422 00000255 83CB07                           or ebx,0x00000007
   423 00000258 891DF8FFFFFF                     mov [0xfffffff8],ebx
   424                                  
   425 0000025E 0F013DF8FFFFFF                   invlpg [0xfffffff8]
   426                                  
   427 00000265 BE00F0FFFF                       mov esi,0xfffff000                 ;ESI->当前页目录的线性地址
   428 0000026A BF00E0FFFF                       mov edi,0xffffe000                 ;EDI->新页目录的线性地址
   429 0000026F B900040000                       mov ecx,1024                       ;ECX=要复制的目录项数
   430 00000274 FC                               cld
   431 00000275 F3A5                             repe movsd 
   432                                           
   433 00000277 59                               pop ecx
   434 00000278 5B                               pop ebx
   435 00000279 5F                               pop edi
   436 0000027A 5E                               pop esi
   437 0000027B 07                               pop es
   438 0000027C 1F                               pop ds
   439                                           
   440 0000027D CB                               retf
   441                                           
   442                                  ;-------------------------------------------------------------------------------
   443                                  terminate_current_task:                     ;终止当前任务
   444                                                                              ;注意，执行此例程时，当前任务仍在
   445                                                                              ;运行中。此例程其实也是当前任务的
   446                                                                              ;一部分 
   447 0000027E B830000000                       mov eax,core_data_seg_sel
   448 00000283 8ED8                             mov ds,eax
   449                                  
   450 00000285 9C                               pushfd
   451 00000286 5A                               pop edx
   452                                   
   453 00000287 66F7C20040                       test dx,0100_0000_0000_0000B       ;测试NT位
   454 0000028C 7506                             jnz .b1                            ;当前任务是嵌套的，到.b1执行iretd 
   455 0000028E FF2D[92070000]                   jmp far [program_man_tss]          ;程序管理器任务 
   456                                    .b1: 
   457 00000294 CF                               iretd
   458                                  
   459                                  sys_routine_end:
   460                                  
   461                                  ;===============================================================================
   462                                  SECTION core_data vstart=0                  ;系统核心的数据段 
   463                                  ;------------------------------------------------------------------------------- 
   464 00000000 0000                             pgdt             dw  0             ;用于设置和修改GDT 
   465 00000002 00000000                                          dd  0
   466                                  
   467 00000006 FFFFFFFFFF5555FF                 page_bit_map     db  0xff,0xff,0xff,0xff,0xff,0x55,0x55,0xff
   468 0000000E FFFFFFFFFFFFFFFF                                  db  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
   469 00000016 FFFFFFFFFFFFFFFF                                  db  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
   470 0000001E FFFFFFFFFFFFFFFF                                  db  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
   471 00000026 5555555555555555                                  db  0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55
   472 0000002E 0000000000000000                                  db  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
   473 00000036 0000000000000000                                  db  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
   474 0000003E 0000000000000000                                  db  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
   475                                           page_map_len     equ $-page_bit_map
   476                                                            
   477                                           ;符号地址检索表
   478                                           salt:
   479 00000046 405072696E74537472-              salt_1           db  '@PrintString'
   479 0000004F 696E67             
   480 00000052 00<rept>                                     times 256-($-salt_1) db 0
   481 00000146 [00000000]                                        dd  put_string
   482 0000014A 2800                                              dw  sys_routine_seg_sel
   483                                  
   484 0000014C 40526561644469736B-              salt_2           db  '@ReadDiskData'
   484 00000155 44617461           
   485 00000159 00<rept>                                     times 256-($-salt_2) db 0
   486 0000024C [B4000000]                                        dd  read_hard_disk_0
   487 00000250 2800                                              dw  sys_routine_seg_sel
   488                                  
   489 00000252 405072696E7444776F-              salt_3           db  '@PrintDwordAsHexString'
   489 0000025B 726441734865785374-
   489 00000264 72696E67           
   490 00000268 00<rept>                                     times 256-($-salt_3) db 0
   491 00000352 [F9000000]                                        dd  put_hex_dword
   492 00000356 2800                                              dw  sys_routine_seg_sel
   493                                  
   494 00000358 405465726D696E6174-              salt_4           db  '@TerminateProgram'
   494 00000361 6550726F6772616D   
   495 00000369 00<rept>                                     times 256-($-salt_4) db 0
   496 00000458 [7E020000]                                        dd  terminate_current_task
   497 0000045C 2800                                              dw  sys_routine_seg_sel
   498                                  
   499                                           salt_item_len   equ $-salt_4
   500                                           salt_items      equ ($-salt)/salt_item_len
   501                                  
   502 0000045E 2020576F726B696E67-              message_0        db  '  Working in system core,protect mode.'
   502 00000467 20696E207379737465-
   502 00000470 6D20636F72652C7072-
   502 00000479 6F74656374206D6F64-
   502 00000482 652E               
   503 00000484 0D0A00                                            db  0x0d,0x0a,0
   504                                  
   505 00000487 2020506167696E6720-              message_1        db  '  Paging is enabled.System core is mapped to'
   505 00000490 697320656E61626C65-
   505 00000499 642E53797374656D20-
   505 000004A2 636F7265206973206D-
   505 000004AB 617070656420746F   
   506 000004B3 206164647265737320-                               db  ' address 0x80000000.',0x0d,0x0a,0
   506 000004BC 307838303030303030-
   506 000004C5 302E0D0A00         
   507                                           
   508 000004CA 0D0A                             message_2        db  0x0d,0x0a
   509 000004CC 202053797374656D20-                               db  '  System wide CALL-GATE mounted.',0x0d,0x0a,0
   509 000004D5 776964652043414C4C-
   509 000004DE 2D47415445206D6F75-
   509 000004E7 6E7465642E0D0A00   
   510                                           
   511 000004EF 2A2A2A2A2A2A2A2A4E-              message_3        db  '********No more pages********',0
   511 000004F8 6F206D6F7265207061-
   511 00000501 6765732A2A2A2A2A2A-
   511 0000050A 2A2A00             
   512                                           
   513 0000050D 0D0A20205461736B20-              message_4        db  0x0d,0x0a,'  Task switching...@_@',0x0d,0x0a,0
   513 00000516 737769746368696E67-
   513 0000051F 2E2E2E405F400D0A00 
   514                                           
   515 00000528 0D0A202050726F6365-              message_5        db  0x0d,0x0a,'  Processor HALT.',0
   515 00000531 73736F722048414C54-
   515 0000053A 2E00               
   516                                           
   517                                          
   518 0000053C 303132333435363738-              bin_hex          db '0123456789ABCDEF'
   518 00000545 39414243444546     
   519                                                                              ;put_hex_dword子过程用的查找表 
   520                                  
   521 0000054C 00<rept>                         core_buf   times 512 db 0          ;内核用的缓冲区
   522                                  
   523 0000074C 0D0A202000                       cpu_brnd0        db 0x0d,0x0a,'  ',0
   524 00000751 00<rept>                         cpu_brand  times 52 db 0
   525 00000785 0D0A0D0A00                       cpu_brnd1        db 0x0d,0x0a,0x0d,0x0a,0
   526                                  
   527                                           ;任务控制块链
   528 0000078A 00000000                         tcb_chain        dd  0
   529                                  
   530                                           ;内核信息
   531 0000078E 00001080                         core_next_laddr  dd  0x80100000    ;内核空间中下一个可分配的线性地址        
   532 00000792 00000000                         program_man_tss  dd  0             ;程序管理器的TSS描述符选择子 
   533 00000796 0000                                              dw  0
   534                                  
   535                                  core_data_end:
   536                                                 
   537                                  ;===============================================================================
   538                                  SECTION core_code vstart=0
   539                                  ;-------------------------------------------------------------------------------
   540                                  fill_descriptor_in_ldt:                     ;在LDT内安装一个新的描述符
   541                                                                              ;输入：EDX:EAX=描述符
   542                                                                              ;          EBX=TCB基地址
   543                                                                              ;输出：CX=描述符的选择子
   544 00000000 50                               push eax
   545 00000001 52                               push edx
   546 00000002 57                               push edi
   547 00000003 1E                               push ds
   548                                  
   549 00000004 B908000000                       mov ecx,mem_0_4_gb_seg_sel
   550 00000009 8ED9                             mov ds,ecx
   551                                  
   552 0000000B 8B7B0C                           mov edi,[ebx+0x0c]                 ;获得LDT基地址
   553                                           
   554 0000000E 31C9                             xor ecx,ecx
   555 00000010 668B4B0A                         mov cx,[ebx+0x0a]                  ;获得LDT界限
   556 00000014 6641                             inc cx                             ;LDT的总字节数，即新描述符偏移地址
   557                                           
   558 00000016 89040F                           mov [edi+ecx+0x00],eax
   559 00000019 89540F04                         mov [edi+ecx+0x04],edx             ;安装描述符
   560                                  
   561 0000001D 6683C108                         add cx,8                           
   562 00000021 6649                             dec cx                             ;得到新的LDT界限值 
   563                                  
   564 00000023 66894B0A                         mov [ebx+0x0a],cx                  ;更新LDT界限值到TCB
   565                                  
   566 00000027 6689C8                           mov ax,cx
   567 0000002A 6631D2                           xor dx,dx
   568 0000002D 66B90800                         mov cx,8
   569 00000031 66F7F1                           div cx
   570                                           
   571 00000034 6689C1                           mov cx,ax
   572 00000037 66C1E103                         shl cx,3                           ;左移3位，并且
   573 0000003B 6683C904                         or cx,0000_0000_0000_0100B         ;使TI位=1，指向LDT，最后使RPL=00 
   574                                  
   575 0000003F 1F                               pop ds
   576 00000040 5F                               pop edi
   577 00000041 5A                               pop edx
   578 00000042 58                               pop eax
   579                                       
   580 00000043 C3                               ret
   581                                        
   582                                  ;-------------------------------------------------------------------------------
   583                                  load_relocate_program:                      ;加载并重定位用户程序
   584                                                                              ;输入: PUSH 逻辑扇区号
   585                                                                              ;      PUSH 任务控制块基地址
   586                                                                              ;输出：无 
   587 00000044 60                               pushad
   588                                        
   589 00000045 1E                               push ds
   590 00000046 06                               push es
   591                                        
   592 00000047 89E5                             mov ebp,esp                        ;为访问通过堆栈传递的参数做准备
   593                                        
   594 00000049 B908000000                       mov ecx,mem_0_4_gb_seg_sel
   595 0000004E 8EC1                             mov es,ecx
   596                                        
   597                                           ;清空当前页目录的前半部分（对应低2GB的局部地址空间） 
   598 00000050 BB00F0FFFF                       mov ebx,0xfffff000
   599 00000055 31F6                             xor esi,esi
   600                                    .b1:
   601 00000057 26C704B300000000                 mov dword [es:ebx+esi*4],0x00000000
   602 0000005F 46                               inc esi
   603 00000060 81FE00020000                     cmp esi,512
   604 00000066 7CEF                             jl .b1
   605                                           
   606                                           ;以下开始分配内存并加载用户程序
   607 00000068 B830000000                       mov eax,core_data_seg_sel
   608 0000006D 8ED8                             mov ds,eax                         ;切换DS到内核数据段
   609                                  
   610 0000006F 8B4530                           mov eax,[ebp+12*4]                 ;从堆栈中取出用户程序起始扇区号
   611 00000072 BB[4C050000]                     mov ebx,core_buf                   ;读取程序头部数据
   612 00000077 9A[B4000000]2800                 call sys_routine_seg_sel:read_hard_disk_0
   613                                  
   614                                           ;以下判断整个程序有多大
   615 0000007E A1[4C050000]                     mov eax,[core_buf]                 ;程序尺寸
   616 00000083 89C3                             mov ebx,eax
   617 00000085 81E300F0FFFF                     and ebx,0xfffff000                 ;使之4KB对齐 
   618 0000008B 81C300100000                     add ebx,0x1000                        
   619 00000091 A9FF0F0000                       test eax,0x00000fff                ;程序的大小正好是4KB的倍数吗? 
   620 00000096 0F45C3                           cmovnz eax,ebx                     ;不是。使用凑整的结果
   621                                  
   622 00000099 89C1                             mov ecx,eax
   623 0000009B C1E90C                           shr ecx,12                         ;程序占用的总4KB页数 
   624                                           
   625 0000009E B808000000                       mov eax,mem_0_4_gb_seg_sel         ;切换DS到0-4GB的段
   626 000000A3 8ED8                             mov ds,eax
   627                                  
   628 000000A5 8B4530                           mov eax,[ebp+12*4]                 ;起始扇区号
   629 000000A8 8B752C                           mov esi,[ebp+11*4]                 ;从堆栈中取得TCB的基地址
   630                                    .b2:
   631 000000AB 268B5E06                         mov ebx,[es:esi+0x06]              ;取得可用的线性地址
   632 000000AF 2681460600100000                 add dword [es:esi+0x06],0x1000
   633 000000B7 9A[E6010000]2800                 call sys_routine_seg_sel:alloc_inst_a_page
   634                                  
   635 000000BE 51                               push ecx
   636 000000BF B908000000                       mov ecx,8
   637                                    .b3:
   638 000000C4 9A[B4000000]2800                 call sys_routine_seg_sel:read_hard_disk_0
   639 000000CB 40                               inc eax
   640 000000CC E2F6                             loop .b3
   641                                  
   642 000000CE 59                               pop ecx
   643 000000CF E2DA                             loop .b2
   644                                  
   645                                           ;在内核地址空间内创建用户任务的TSS
   646 000000D1 B830000000                       mov eax,core_data_seg_sel          ;切换DS到内核数据段
   647 000000D6 8ED8                             mov ds,eax
   648                                  
   649 000000D8 8B1D[8E070000]                   mov ebx,[core_next_laddr]          ;用户任务的TSS必须在全局空间上分配 
   650 000000DE 9A[E6010000]2800                 call sys_routine_seg_sel:alloc_inst_a_page
   651 000000E5 8105[8E070000]0010-              add dword [core_next_laddr],4096
   651 000000ED 0000               
   652                                           
   653 000000EF 26895E14                         mov [es:esi+0x14],ebx              ;在TCB中填写TSS的线性地址 
   654 000000F3 2666C746126700                   mov word [es:esi+0x12],103         ;在TCB中填写TSS的界限值 
   655                                            
   656                                           ;在用户任务的局部地址空间内创建LDT 
   657 000000FA 268B5E06                         mov ebx,[es:esi+0x06]              ;从TCB中取得可用的线性地址
   658 000000FE 2681460600100000                 add dword [es:esi+0x06],0x1000
   659 00000106 9A[E6010000]2800                 call sys_routine_seg_sel:alloc_inst_a_page
   660 0000010D 26895E0C                         mov [es:esi+0x0c],ebx              ;填写LDT线性地址到TCB中 
   661                                  
   662                                           ;建立程序代码段描述符
   663 00000111 B800000000                       mov eax,0x00000000
   664 00000116 BBFFFF0F00                       mov ebx,0x000fffff                 
   665 0000011B B900F8C000                       mov ecx,0x00c0f800                 ;4KB粒度的代码段描述符，特权级3
   666 00000120 9A[7E010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   667 00000127 89F3                             mov ebx,esi                        ;TCB的基地址
   668 00000129 E8D2FEFFFF                       call fill_descriptor_in_ldt
   669 0000012E 6683C903                         or cx,0000_0000_0000_0011B         ;设置选择子的特权级为3
   670                                           
   671 00000132 268B5E14                         mov ebx,[es:esi+0x14]              ;从TCB中获取TSS的线性地址
   672 00000136 2666894B4C                       mov [es:ebx+76],cx                 ;填写TSS的CS域 
   673                                  
   674                                           ;建立程序数据段描述符
   675 0000013B B800000000                       mov eax,0x00000000
   676 00000140 BBFFFF0F00                       mov ebx,0x000fffff                 
   677 00000145 B900F2C000                       mov ecx,0x00c0f200                 ;4KB粒度的数据段描述符，特权级3
   678 0000014A 9A[7E010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   679 00000151 89F3                             mov ebx,esi                        ;TCB的基地址
   680 00000153 E8A8FEFFFF                       call fill_descriptor_in_ldt
   681 00000158 6683C903                         or cx,0000_0000_0000_0011B         ;设置选择子的特权级为3
   682                                           
   683 0000015C 268B5E14                         mov ebx,[es:esi+0x14]              ;从TCB中获取TSS的线性地址
   684 00000160 2666894B54                       mov [es:ebx+84],cx                 ;填写TSS的DS域 
   685 00000165 2666894B48                       mov [es:ebx+72],cx                 ;填写TSS的ES域
   686 0000016A 2666894B58                       mov [es:ebx+88],cx                 ;填写TSS的FS域
   687 0000016F 2666894B5C                       mov [es:ebx+92],cx                 ;填写TSS的GS域
   688                                           
   689                                           ;将数据段作为用户任务的3特权级固有堆栈 
   690 00000174 268B5E06                         mov ebx,[es:esi+0x06]              ;从TCB中取得可用的线性地址
   691 00000178 2681460600100000                 add dword [es:esi+0x06],0x1000
   692 00000180 9A[E6010000]2800                 call sys_routine_seg_sel:alloc_inst_a_page
   693                                           
   694 00000187 268B5E14                         mov ebx,[es:esi+0x14]              ;从TCB中获取TSS的线性地址
   695 0000018B 2666894B50                       mov [es:ebx+80],cx                 ;填写TSS的SS域
   696 00000190 268B5606                         mov edx,[es:esi+0x06]              ;堆栈的高端线性地址 
   697 00000194 26895338                         mov [es:ebx+56],edx                ;填写TSS的ESP域 
   698                                  
   699                                           ;在用户任务的局部地址空间内创建0特权级堆栈
   700 00000198 268B5E06                         mov ebx,[es:esi+0x06]              ;从TCB中取得可用的线性地址
   701 0000019C 2681460600100000                 add dword [es:esi+0x06],0x1000
   702 000001A4 9A[E6010000]2800                 call sys_routine_seg_sel:alloc_inst_a_page
   703                                  
   704 000001AB B800000000                       mov eax,0x00000000
   705 000001B0 BBFFFF0F00                       mov ebx,0x000fffff
   706 000001B5 B90092C000                       mov ecx,0x00c09200                 ;4KB粒度的堆栈段描述符，特权级0
   707 000001BA 9A[7E010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   708 000001C1 89F3                             mov ebx,esi                        ;TCB的基地址
   709 000001C3 E838FEFFFF                       call fill_descriptor_in_ldt
   710 000001C8 6683C900                         or cx,0000_0000_0000_0000B         ;设置选择子的特权级为0
   711                                  
   712 000001CC 268B5E14                         mov ebx,[es:esi+0x14]              ;从TCB中获取TSS的线性地址
   713 000001D0 2666894B08                       mov [es:ebx+8],cx                  ;填写TSS的SS0域
   714 000001D5 268B5606                         mov edx,[es:esi+0x06]              ;堆栈的高端线性地址
   715 000001D9 26895304                         mov [es:ebx+4],edx                 ;填写TSS的ESP0域 
   716                                  
   717                                           ;在用户任务的局部地址空间内创建1特权级堆栈
   718 000001DD 268B5E06                         mov ebx,[es:esi+0x06]              ;从TCB中取得可用的线性地址
   719 000001E1 2681460600100000                 add dword [es:esi+0x06],0x1000
   720 000001E9 9A[E6010000]2800                 call sys_routine_seg_sel:alloc_inst_a_page
   721                                  
   722 000001F0 B800000000                       mov eax,0x00000000
   723 000001F5 BBFFFF0F00                       mov ebx,0x000fffff
   724 000001FA B900B2C000                       mov ecx,0x00c0b200                 ;4KB粒度的堆栈段描述符，特权级1
   725 000001FF 9A[7E010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   726 00000206 89F3                             mov ebx,esi                        ;TCB的基地址
   727 00000208 E8F3FDFFFF                       call fill_descriptor_in_ldt
   728 0000020D 6683C901                         or cx,0000_0000_0000_0001B         ;设置选择子的特权级为1
   729                                  
   730 00000211 268B5E14                         mov ebx,[es:esi+0x14]              ;从TCB中获取TSS的线性地址
   731 00000215 2666894B10                       mov [es:ebx+16],cx                 ;填写TSS的SS1域
   732 0000021A 268B5606                         mov edx,[es:esi+0x06]              ;堆栈的高端线性地址
   733 0000021E 2689530C                         mov [es:ebx+12],edx                ;填写TSS的ESP1域 
   734                                  
   735                                           ;在用户任务的局部地址空间内创建2特权级堆栈
   736 00000222 268B5E06                         mov ebx,[es:esi+0x06]              ;从TCB中取得可用的线性地址
   737 00000226 2681460600100000                 add dword [es:esi+0x06],0x1000
   738 0000022E 9A[E6010000]2800                 call sys_routine_seg_sel:alloc_inst_a_page
   739                                  
   740 00000235 B800000000                       mov eax,0x00000000
   741 0000023A BBFFFF0F00                       mov ebx,0x000fffff
   742 0000023F B900D2C000                       mov ecx,0x00c0d200                 ;4KB粒度的堆栈段描述符，特权级2
   743 00000244 9A[7E010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   744 0000024B 89F3                             mov ebx,esi                        ;TCB的基地址
   745 0000024D E8AEFDFFFF                       call fill_descriptor_in_ldt
   746 00000252 6683C902                         or cx,0000_0000_0000_0010B         ;设置选择子的特权级为2
   747                                  
   748 00000256 268B5E14                         mov ebx,[es:esi+0x14]              ;从TCB中获取TSS的线性地址
   749 0000025A 2666894B18                       mov [es:ebx+24],cx                 ;填写TSS的SS2域
   750 0000025F 268B5606                         mov edx,[es:esi+0x06]              ;堆栈的高端线性地址
   751 00000263 26895314                         mov [es:ebx+20],edx                ;填写TSS的ESP2域 
   752                                  
   753                                  
   754                                           ;重定位SALT 
   755 00000267 B808000000                       mov eax,mem_0_4_gb_seg_sel         ;访问任务的4GB虚拟地址空间时用 
   756 0000026C 8EC0                             mov es,eax                         
   757                                                                                      
   758 0000026E B830000000                       mov eax,core_data_seg_sel
   759 00000273 8ED8                             mov ds,eax
   760                                        
   761 00000275 FC                               cld
   762                                  
   763 00000276 268B0D0C000000                   mov ecx,[es:0x0c]                  ;U-SALT条目数 
   764 0000027D 268B3D08000000                   mov edi,[es:0x08]                  ;U-SALT在4GB空间内的偏移 
   765                                    .b4:
   766 00000284 51                               push ecx
   767 00000285 57                               push edi
   768                                        
   769 00000286 B904000000                       mov ecx,salt_items
   770 0000028B BE[46000000]                     mov esi,salt
   771                                    .b5:
   772 00000290 57                               push edi
   773 00000291 56                               push esi
   774 00000292 51                               push ecx
   775                                  
   776 00000293 B940000000                       mov ecx,64                         ;检索表中，每条目的比较次数 
   777 00000298 F3A7                             repe cmpsd                         ;每次比较4字节 
   778 0000029A 7519                             jnz .b6
   779 0000029C 8B06                             mov eax,[esi]                      ;若匹配，则esi恰好指向其后的地址
   780 0000029E 26898700FFFFFF                   mov [es:edi-256],eax               ;将字符串改写成偏移地址 
   781 000002A5 668B4604                         mov ax,[esi+4]
   782 000002A9 6683C803                         or ax,0000000000000011B            ;以用户程序自己的特权级使用调用门
   783                                                                              ;故RPL=3 
   784 000002AD 2666898704FFFFFF                 mov [es:edi-252],ax                ;回填调用门选择子 
   785                                    .b6:
   786                                        
   787 000002B5 59                               pop ecx
   788 000002B6 5E                               pop esi
   789 000002B7 81C606010000                     add esi,salt_item_len
   790 000002BD 5F                               pop edi                            ;从头比较 
   791 000002BE E2D0                             loop .b5
   792                                        
   793 000002C0 5F                               pop edi
   794 000002C1 81C700010000                     add edi,256
   795 000002C7 59                               pop ecx
   796 000002C8 E2BA                             loop .b4
   797                                  
   798                                           ;在GDT中登记LDT描述符
   799 000002CA 8B752C                           mov esi,[ebp+11*4]                 ;从堆栈中取得TCB的基地址
   800 000002CD 268B460C                         mov eax,[es:esi+0x0c]              ;LDT的起始线性地址
   801 000002D1 260FB75E0A                       movzx ebx,word [es:esi+0x0a]       ;LDT段界限
   802 000002D6 B900824000                       mov ecx,0x00408200                 ;LDT描述符，特权级0
   803 000002DB 9A[7E010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   804 000002E2 9A[22010000]2800                 call sys_routine_seg_sel:set_up_gdt_descriptor
   805 000002E9 2666894E10                       mov [es:esi+0x10],cx               ;登记LDT选择子到TCB中
   806                                  
   807 000002EE 268B5E14                         mov ebx,[es:esi+0x14]              ;从TCB中获取TSS的线性地址
   808 000002F2 2666894B60                       mov [es:ebx+96],cx                 ;填写TSS的LDT域 
   809                                  
   810 000002F7 2666C7030000                     mov word [es:ebx+0],0              ;反向链=0
   811                                        
   812 000002FD 26668B5612                       mov dx,[es:esi+0x12]               ;段长度（界限）
   813 00000302 2666895366                       mov [es:ebx+102],dx                ;填写TSS的I/O位图偏移域 
   814                                        
   815 00000307 2666C743640000                   mov word [es:ebx+100],0            ;T=0
   816                                        
   817 0000030E 26A104000000                     mov eax,[es:0x04]                  ;从任务的4GB地址空间获取入口点 
   818 00000314 26894320                         mov [es:ebx+32],eax                ;填写TSS的EIP域 
   819                                  
   820 00000318 9C                               pushfd
   821 00000319 5A                               pop edx
   822 0000031A 26895324                         mov [es:ebx+36],edx                ;填写TSS的EFLAGS域 
   823                                  
   824                                           ;在GDT中登记TSS描述符
   825 0000031E 268B4614                         mov eax,[es:esi+0x14]              ;从TCB中获取TSS的起始线性地址
   826 00000322 260FB75E12                       movzx ebx,word [es:esi+0x12]       ;段长度（界限）
   827 00000327 B900894000                       mov ecx,0x00408900                 ;TSS描述符，特权级0
   828 0000032C 9A[7E010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   829 00000333 9A[22010000]2800                 call sys_routine_seg_sel:set_up_gdt_descriptor
   830 0000033A 2666894E18                       mov [es:esi+0x18],cx               ;登记TSS选择子到TCB
   831                                  
   832                                           ;创建用户任务的页目录
   833                                           ;注意！页的分配和使用是由页位图决定的，可以不占用线性地址空间 
   834 0000033F 9A[3F020000]2800                 call sys_routine_seg_sel:create_copy_cur_pdir
   835 00000346 268B5E14                         mov ebx,[es:esi+0x14]              ;从TCB中获取TSS的线性地址
   836 0000034A 2689431C                         mov dword [es:ebx+28],eax          ;填写TSS的CR3(PDBR)域
   837                                                     
   838 0000034E 07                               pop es                             ;恢复到调用此过程前的es段 
   839 0000034F 1F                               pop ds                             ;恢复到调用此过程前的ds段
   840                                        
   841 00000350 61                               popad
   842                                        
   843 00000351 C20800                           ret 8                              ;丢弃调用本过程前压入的参数 
   844                                        
   845                                  ;-------------------------------------------------------------------------------
   846                                  append_to_tcb_link:                         ;在TCB链上追加任务控制块
   847                                                                              ;输入：ECX=TCB线性基地址
   848 00000354 50                               push eax
   849 00000355 52                               push edx
   850 00000356 1E                               push ds
   851 00000357 06                               push es
   852                                           
   853 00000358 B830000000                       mov eax,core_data_seg_sel          ;令DS指向内核数据段 
   854 0000035D 8ED8                             mov ds,eax
   855 0000035F B808000000                       mov eax,mem_0_4_gb_seg_sel         ;令ES指向0..4GB段
   856 00000364 8EC0                             mov es,eax
   857                                           
   858 00000366 26C70100000000                   mov dword [es: ecx+0x00],0         ;当前TCB指针域清零，以指示这是最
   859                                                                              ;后一个TCB
   860                                                                               
   861 0000036D A1[8A070000]                     mov eax,[tcb_chain]                ;TCB表头指针
   862 00000372 09C0                             or eax,eax                         ;链表为空？
   863 00000374 740E                             jz .notcb 
   864                                           
   865                                    .searc:
   866 00000376 89C2                             mov edx,eax
   867 00000378 268B02                           mov eax,[es: edx+0x00]
   868 0000037B 09C0                             or eax,eax               
   869 0000037D 75F7                             jnz .searc
   870                                           
   871 0000037F 26890A                           mov [es: edx+0x00],ecx
   872 00000382 EB06                             jmp .retpc
   873                                           
   874                                    .notcb:       
   875 00000384 890D[8A070000]                   mov [tcb_chain],ecx                ;若为空表，直接令表头指针指向TCB
   876                                           
   877                                    .retpc:
   878 0000038A 07                               pop es
   879 0000038B 1F                               pop ds
   880 0000038C 5A                               pop edx
   881 0000038D 58                               pop eax
   882                                           
   883 0000038E C3                               ret
   884                                           
   885                                  ;-------------------------------------------------------------------------------
   886                                  start:
   887 0000038F B930000000                       mov ecx,core_data_seg_sel          ;令DS指向核心数据段 
   888 00000394 8ED9                             mov ds,ecx
   889                                  
   890 00000396 B908000000                       mov ecx,mem_0_4_gb_seg_sel         ;令ES指向4GB数据段 
   891 0000039B 8EC1                             mov es,ecx
   892                                  
   893 0000039D BB[5E040000]                     mov ebx,message_0                    
   894 000003A2 9A[00000000]2800                 call sys_routine_seg_sel:put_string
   895                                                                           
   896                                           ;显示处理器品牌信息 
   897 000003A9 B802000080                       mov eax,0x80000002
   898 000003AE 0FA2                             cpuid
   899 000003B0 A3[51070000]                     mov [cpu_brand + 0x00],eax
   900 000003B5 891D[55070000]                   mov [cpu_brand + 0x04],ebx
   901 000003BB 890D[59070000]                   mov [cpu_brand + 0x08],ecx
   902 000003C1 8915[5D070000]                   mov [cpu_brand + 0x0c],edx
   903                                        
   904 000003C7 B803000080                       mov eax,0x80000003
   905 000003CC 0FA2                             cpuid
   906 000003CE A3[61070000]                     mov [cpu_brand + 0x10],eax
   907 000003D3 891D[65070000]                   mov [cpu_brand + 0x14],ebx
   908 000003D9 890D[69070000]                   mov [cpu_brand + 0x18],ecx
   909 000003DF 8915[6D070000]                   mov [cpu_brand + 0x1c],edx
   910                                  
   911 000003E5 B804000080                       mov eax,0x80000004
   912 000003EA 0FA2                             cpuid
   913 000003EC A3[71070000]                     mov [cpu_brand + 0x20],eax
   914 000003F1 891D[75070000]                   mov [cpu_brand + 0x24],ebx
   915 000003F7 890D[79070000]                   mov [cpu_brand + 0x28],ecx
   916 000003FD 8915[7D070000]                   mov [cpu_brand + 0x2c],edx
   917                                  
   918 00000403 BB[4C070000]                     mov ebx,cpu_brnd0                  ;显示处理器品牌信息 
   919 00000408 9A[00000000]2800                 call sys_routine_seg_sel:put_string
   920 0000040F BB[51070000]                     mov ebx,cpu_brand
   921 00000414 9A[00000000]2800                 call sys_routine_seg_sel:put_string
   922 0000041B BB[85070000]                     mov ebx,cpu_brnd1
   923 00000420 9A[00000000]2800                 call sys_routine_seg_sel:put_string
   924                                  
   925                                           ;准备打开分页机制
   926                                           
   927                                           ;创建系统内核的页目录表PDT
   928                                           ;页目录表清零 
   929 00000427 B900040000                       mov ecx,1024                       ;1024个目录项
   930 0000042C BB00000200                       mov ebx,0x00020000                 ;页目录的物理地址
   931 00000431 31F6                             xor esi,esi
   932                                    .b1:
   933 00000433 26C7043300000000                 mov dword [es:ebx+esi],0x00000000  ;页目录表项清零 
   934 0000043B 83C604                           add esi,4
   935 0000043E E2F3                             loop .b1
   936                                           
   937                                           ;在页目录内创建指向页目录自己的目录项
   938 00000440 26C783FC0F00000300-              mov dword [es:ebx+4092],0x00020003 
   938 00000449 0200               
   939                                  
   940                                           ;在页目录内创建与线性地址0x00000000对应的目录项
   941 0000044B 26C70303100200                   mov dword [es:ebx+0],0x00021003    ;写入目录项（页表的物理地址和属性）      
   942                                  
   943                                           ;创建与上面那个目录项相对应的页表，初始化页表项 
   944 00000452 BB00100200                       mov ebx,0x00021000                 ;页表的物理地址
   945 00000457 31C0                             xor eax,eax                        ;起始页的物理地址 
   946 00000459 31F6                             xor esi,esi
   947                                    .b2:       
   948 0000045B 89C2                             mov edx,eax
   949 0000045D 83CA03                           or edx,0x00000003                                                      
   950 00000460 268914B3                         mov [es:ebx+esi*4],edx             ;登记页的物理地址
   951 00000464 0500100000                       add eax,0x1000                     ;下一个相邻页的物理地址 
   952 00000469 46                               inc esi
   953 0000046A 81FE00010000                     cmp esi,256                        ;仅低端1MB内存对应的页才是有效的 
   954 00000470 7CE9                             jl .b2
   955                                           
   956                                    .b3:                                      ;其余的页表项置为无效
   957 00000472 26C704B300000000                 mov dword [es:ebx+esi*4],0x00000000  
   958 0000047A 46                               inc esi
   959 0000047B 81FE00040000                     cmp esi,1024
   960 00000481 7CEF                             jl .b3 
   961                                  
   962                                           ;令CR3寄存器指向页目录，并正式开启页功能 
   963 00000483 B800000200                       mov eax,0x00020000                 ;PCD=PWT=0
   964 00000488 0F22D8                           mov cr3,eax
   965                                  
   966 0000048B 0F20C0                           mov eax,cr0
   967 0000048E 0D00000080                       or eax,0x80000000
   968 00000493 0F22C0                           mov cr0,eax                        ;开启分页机制
   969                                  
   970                                           ;在页目录内创建与线性地址0x80000000对应的目录项
   971 00000496 BB00F0FFFF                       mov ebx,0xfffff000                 ;页目录自己的线性地址 
   972 0000049B BE00000080                       mov esi,0x80000000                 ;映射的起始地址
   973 000004A0 C1EE16                           shr esi,22                         ;线性地址的高10位是目录索引
   974 000004A3 C1E602                           shl esi,2
   975 000004A6 26C7043303100200                 mov dword [es:ebx+esi],0x00021003  ;写入目录项（页表的物理地址和属性）
   976                                                                              ;目标单元的线性地址为0xFFFFF200
   977                                                                               
   978                                           ;将GDT中的段描述符映射到线性地址0x80000000
   979 000004AE 0F0105[00000000]                 sgdt [pgdt]
   980                                           
   981 000004B5 8B1D[02000000]                   mov ebx,[pgdt+2]
   982                                           
   983 000004BB 26814B1400000080                 or dword [es:ebx+0x10+4],0x80000000
   984 000004C3 26814B1C00000080                 or dword [es:ebx+0x18+4],0x80000000
   985 000004CB 26814B2400000080                 or dword [es:ebx+0x20+4],0x80000000
   986 000004D3 26814B2C00000080                 or dword [es:ebx+0x28+4],0x80000000
   987 000004DB 26814B3400000080                 or dword [es:ebx+0x30+4],0x80000000
   988 000004E3 26814B3C00000080                 or dword [es:ebx+0x38+4],0x80000000
   989                                           
   990 000004EB 8105[02000000]0000-              add dword [pgdt+2],0x80000000      ;GDTR也用的是线性地址 
   990 000004F3 0080               
   991                                           
   992 000004F5 0F0115[00000000]                 lgdt [pgdt]
   993                                          
   994 000004FC EA[03050000]3800                 jmp core_code_seg_sel:flush        ;刷新段寄存器CS，启用高端线性地址 
   995                                                                               
   996                                     flush:
   997 00000503 B818000000                       mov eax,core_stack_seg_sel
   998 00000508 8ED0                             mov ss,eax
   999                                           
  1000 0000050A B830000000                       mov eax,core_data_seg_sel
  1001 0000050F 8ED8                             mov ds,eax
  1002                                            
  1003 00000511 BB[87040000]                     mov ebx,message_1
  1004 00000516 9A[00000000]2800                 call sys_routine_seg_sel:put_string
  1005                                  
  1006                                           ;以下开始安装为整个系统服务的调用门。特权级之间的控制转移必须使用门
  1007 0000051D BF[46000000]                     mov edi,salt                       ;C-SALT表的起始位置 
  1008 00000522 B904000000                       mov ecx,salt_items                 ;C-SALT表的条目数量 
  1009                                    .b4:
  1010 00000527 51                               push ecx   
  1011 00000528 8B8700010000                     mov eax,[edi+256]                  ;该条目入口点的32位偏移地址 
  1012 0000052E 668B9F04010000                   mov bx,[edi+260]                   ;该条目入口点的段选择子 
  1013 00000535 66B900EC                         mov cx,1_11_0_1100_000_00000B      ;特权级3的调用门(3以上的特权级才
  1014                                                                              ;允许访问)，0个参数(因为用寄存器
  1015                                                                              ;传递参数，而没有用栈) 
  1016 00000539 9A[99010000]2800                 call sys_routine_seg_sel:make_gate_descriptor
  1017 00000540 9A[22010000]2800                 call sys_routine_seg_sel:set_up_gdt_descriptor
  1018 00000547 66898F04010000                   mov [edi+260],cx                   ;将返回的门描述符选择子回填
  1019 0000054E 81C706010000                     add edi,salt_item_len              ;指向下一个C-SALT条目 
  1020 00000554 59                               pop ecx
  1021 00000555 E2D0                             loop .b4
  1022                                  
  1023                                           ;对门进行测试 
  1024 00000557 BB[CA040000]                     mov ebx,message_2
  1025 0000055C FF1D[46010000]                   call far [salt_1+256]              ;通过门显示信息(偏移量将被忽略) 
  1026                                        
  1027                                           ;为程序管理器的TSS分配内存空间
  1028 00000562 8B1D[8E070000]                   mov ebx,[core_next_laddr]
  1029 00000568 9A[E6010000]2800                 call sys_routine_seg_sel:alloc_inst_a_page
  1030 0000056F 8105[8E070000]0010-              add dword [core_next_laddr],4096
  1030 00000577 0000               
  1031                                  
  1032                                           ;在程序管理器的TSS中设置必要的项目 
  1033 00000579 2666C7030000                     mov word [es:ebx+0],0              ;反向链=0
  1034                                  
  1035 0000057F 0F20D8                           mov eax,cr3
  1036 00000582 2689431C                         mov dword [es:ebx+28],eax          ;登记CR3(PDBR)
  1037                                  
  1038 00000586 2666C743600000                   mov word [es:ebx+96],0             ;没有LDT。处理器允许没有LDT的任务。
  1039 0000058D 2666C743640000                   mov word [es:ebx+100],0            ;T=0
  1040 00000594 2666C743666700                   mov word [es:ebx+102],103          ;没有I/O位图。0特权级事实上不需要。
  1041                                           
  1042                                           ;创建程序管理器的TSS描述符，并安装到GDT中 
  1043 0000059B 89D8                             mov eax,ebx                        ;TSS的起始线性地址
  1044 0000059D BB67000000                       mov ebx,103                        ;段长度（界限）
  1045 000005A2 B900894000                       mov ecx,0x00408900                 ;TSS描述符，特权级0
  1046 000005A7 9A[7E010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
  1047 000005AE 9A[22010000]2800                 call sys_routine_seg_sel:set_up_gdt_descriptor
  1048 000005B5 66890D[96070000]                 mov [program_man_tss+4],cx         ;保存程序管理器的TSS描述符选择子 
  1049                                  
  1050                                           ;任务寄存器TR中的内容是任务存在的标志，该内容也决定了当前任务是谁。
  1051                                           ;下面的指令为当前正在执行的0特权级任务“程序管理器”后补手续（TSS）。
  1052 000005BC 0F00D9                           ltr cx
  1053                                  
  1054                                           ;现在可认为“程序管理器”任务正执行中
  1055                                  
  1056                                           ;创建用户任务的任务控制块 
  1057 000005BF 8B1D[8E070000]                   mov ebx,[core_next_laddr]
  1058 000005C5 9A[E6010000]2800                 call sys_routine_seg_sel:alloc_inst_a_page
  1059 000005CC 8105[8E070000]0010-              add dword [core_next_laddr],4096
  1059 000005D4 0000               
  1060                                           
  1061 000005D6 26C7430600000000                 mov dword [es:ebx+0x06],0          ;用户任务局部空间的分配从0开始。
  1062 000005DE 2666C7430AFFFF                   mov word [es:ebx+0x0a],0xffff      ;登记LDT初始的界限到TCB中
  1063 000005E5 89D9                             mov ecx,ebx
  1064 000005E7 E868FDFFFF                       call append_to_tcb_link            ;将此TCB添加到TCB链中 
  1065                                        
  1066 000005EC 6A32                             push dword 50                      ;用户程序位于逻辑50扇区
  1067 000005EE 51                               push ecx                           ;压入任务控制块起始线性地址 
  1068                                         
  1069 000005EF E850FAFFFF                       call load_relocate_program         
  1070                                        
  1071 000005F4 BB[0D050000]                     mov ebx,message_4
  1072 000005F9 9A[00000000]2800                 call sys_routine_seg_sel:put_string
  1073                                           
  1074 00000600 26FF5914                         call far [es:ecx+0x14]             ;执行任务切换。
  1075                                           
  1076 00000604 BB[28050000]                     mov ebx,message_5
  1077 00000609 9A[00000000]2800                 call sys_routine_seg_sel:put_string
  1078                                  
  1079 00000610 F4                               hlt
  1080                                              
  1081                                  core_code_end:
  1082                                  
  1083                                  ;-------------------------------------------------------------------------------
  1084                                  SECTION core_trail
  1085                                  ;-------------------------------------------------------------------------------
  1086                                  core_end:
